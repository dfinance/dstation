syntax = "proto3";
package dfinance.vm.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

import "cosmos/base/abci/v1beta1/abci.proto";

import "dfinance/dvm/common-types.proto";
import "dfinance/dvm/metadata.proto";

option go_package = "github.com/dfinance/dstation/x/vm/types";

// Msg defines the VM module Msg service.
service Msg {
  // DeployModule deploys Move module/modules to VMStorage.
  rpc DeployModule(MsgDeployModule) returns (MsgDeployModuleResponse);

  // ExecuteScript executes provided Move script.
  rpc ExecuteScript(MsgExecuteScript) returns (MsgExecuteScriptResponse);
}

// MsgExecuteScript defines a SDK message to execute a script with args to VM.
message MsgExecuteScript {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  message ScriptArg {
    option (gogoproto.equal) = false;
    option (gogoproto.goproto_getters) = false;

    dvm.VMTypeTag type = 1 [
      (gogoproto.moretags) = "yaml:\"type\""
    ];
    bytes value = 2 [
      (gogoproto.moretags) = "yaml:\"value\""
    ];
  }

  // Script sender address
  string signer = 1 [
    (gogoproto.moretags) = "yaml:\"signer\""
  ];

  // Script code
  bytes script = 2 [
    (gogoproto.moretags) = "yaml:\"script\""
  ];

  repeated ScriptArg args = 3 [
    (gogoproto.moretags) = "yaml:\"args\"",
    (gogoproto.nullable) = false
  ];
}

// MsgDeployModule defines a SDK message to deploy a module (contract) to VM.
message MsgDeployModule {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Script sender address
  string signer = 1 [
    (gogoproto.moretags) = "yaml:\"signer\""
  ];

  // Module code
  repeated bytes modules = 2 [
    (gogoproto.moretags) = "yaml:\"modules\""
  ];
}

message MsgDeployModuleResponse {}

message MsgExecuteScriptResponse {}
