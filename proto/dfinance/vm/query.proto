syntax = "proto3";
package dfinance.vm.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

import "cosmos/base/abci/v1beta1/abci.proto";
import "cosmos/base/v1beta1/coin.proto";

import "dfinance/vm/vm.proto";
import "dfinance/dvm/metadata.proto";

option go_package = "github.com/dfinance/dstation/x/vm/types";

// Query defines the gRPC querier service.
service Query {
  // Data queries VMStorage value
  rpc Data(QueryDataRequest) returns (QueryDataResponse) {
    option (google.api.http).get = "/dfinance/vm/v1beta1/data";
  }

  // TxVmStatus queries VM status for Tx
  rpc TxVmStatus(QueryTxVmStatusRequest) returns (QueryTxVmStatusResponse) {
    option (google.api.http).get = "/dfinance/vm/v1beta1/tx_vm_status";
  }

  // Compile compiles provided Move code and returns byte code.
  rpc Compile(QueryCompileRequest) returns (QueryCompileResponse) {
    option (google.api.http).get = "/dfinance/vm/v1beta1/compile";
  }

  // Metadata queries VM for byteCode metadata (metadata.proto/GetMetadata RPC wrapper).
  rpc Metadata(QueryMetadataRequest) returns (QueryMetadataResponse);

  // DelegatedPoolSupply queries Delegated pool module balance.
  rpc DelegatedPoolSupply(QueryDelegatedPoolSupplyRequest) returns (QueryDelegatedPoolSupplyResponse);
}

// QueryDataRequest is request type for Query/Data RPC method.
message QueryDataRequest {
  // VM address (Libra address)
  bytes address = 1;
  // VM path
  bytes path = 2;
}

// QueryDataResponse is response type for Query/Data RPC method.
message QueryDataResponse {
  // VMStorage value for address:path pair
  bytes value = 1;
}

// QueryTxVmStatusRequest is request type for Query/TxVmStatus RPC method.
message QueryTxVmStatusRequest {
  // Tx meta received from /cosmos/tx/v1beta1/txs/{hash}
  cosmos.base.abci.v1beta1.TxResponse tx_meta = 1 [
    (gogoproto.nullable) = false
  ];
}

// QueryTxVmStatusResponse is response type for Query/TxVmStatus RPC method.
message QueryTxVmStatusResponse {
  TxVmStatus vm_status = 1 [
    (gogoproto.nullable) = false
  ];
}

// QueryCompileRequest is request type for Query/Compile RPC method.
message QueryCompileRequest {
  // VM address (Libra address)
  bytes address = 1;
  // Move code [Plain text]
  string code = 2;
}

// QueryCompileResponse is response type for Query/Compile RPC method.
message QueryCompileResponse {
  // Compiled items
  repeated CompiledItem compiled_items = 1 [
    (gogoproto.nullable) = false
  ];
}

// QueryMetadataRequest is request type for Query/Metadata RPC method.
message QueryMetadataRequest {
  bytes code = 1;
}

// QueryMetadataResponse is response type for Query/Metadata RPC method.
message QueryMetadataResponse {
  dvm.Metadata metadata = 1;
}

// QueryDelegatedPoolSupplyRequest is request type for Query/DelegatedPoolSupply RPC method.
message QueryDelegatedPoolSupplyRequest {}

// QueryDelegatedPoolSupplyResponse is response type for Query/DelegatedPoolSupply RPC method.
message QueryDelegatedPoolSupplyResponse {
  repeated cosmos.base.v1beta1.Coin coins = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}