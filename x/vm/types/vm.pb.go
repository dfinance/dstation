// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dfinance/vm/vm.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	dvm "github.com/dfinance/dstation/pkg/types/dvm"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CompiledItem_CodeType int32

const (
	CompiledItem_MODULE CompiledItem_CodeType = 0
	CompiledItem_SCRIPT CompiledItem_CodeType = 1
)

var CompiledItem_CodeType_name = map[int32]string{
	0: "MODULE",
	1: "SCRIPT",
}

var CompiledItem_CodeType_value = map[string]int32{
	"MODULE": 0,
	"SCRIPT": 1,
}

func (x CompiledItem_CodeType) String() string {
	return proto.EnumName(CompiledItem_CodeType_name, int32(x))
}

func (CompiledItem_CodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1fbbb471026580b, []int{2, 0}
}

// TxVmStatus keeps VM statuses and errors for Tx.
type TxVmStatus struct {
	// Tx hash [HEX string]
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty" yaml:"hash"`
	// VM statuses for the Tx
	VmStatuses []VmStatus `protobuf:"bytes,2,rep,name=vm_statuses,json=vmStatuses,proto3" json:"vm_statuses" yaml:"vm_statuses"`
}

func (m *TxVmStatus) Reset()      { *m = TxVmStatus{} }
func (*TxVmStatus) ProtoMessage() {}
func (*TxVmStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1fbbb471026580b, []int{0}
}
func (m *TxVmStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxVmStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxVmStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxVmStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxVmStatus.Merge(m, src)
}
func (m *TxVmStatus) XXX_Size() int {
	return m.Size()
}
func (m *TxVmStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TxVmStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TxVmStatus proto.InternalMessageInfo

// VmStatus is a VM error response.
type VmStatus struct {
	// Error Status: error / discard
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" yaml:"status"`
	// Major code
	MajorCode string `protobuf:"bytes,2,opt,name=major_code,json=majorCode,proto3" json:"major_code,omitempty" yaml:"major_code"`
	// Sub code
	SubCode string `protobuf:"bytes,3,opt,name=sub_code,json=subCode,proto3" json:"sub_code,omitempty" yaml:"sub_code"`
	// Detailed explanation of major code
	StrCode string `protobuf:"bytes,4,opt,name=str_code,json=strCode,proto3" json:"str_code,omitempty" yaml:"str_code"`
	// Error message
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty" yaml:"message"`
}

func (m *VmStatus) Reset()      { *m = VmStatus{} }
func (*VmStatus) ProtoMessage() {}
func (*VmStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1fbbb471026580b, []int{1}
}
func (m *VmStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmStatus.Merge(m, src)
}
func (m *VmStatus) XXX_Size() int {
	return m.Size()
}
func (m *VmStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VmStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VmStatus proto.InternalMessageInfo

// CompiledItem contains VM compilation result.
type CompiledItem struct {
	ByteCode []byte                `protobuf:"bytes,1,opt,name=byte_code,json=byteCode,proto3" json:"byte_code,omitempty"`
	Name     string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Methods  []*dvm.Function       `protobuf:"bytes,3,rep,name=methods,proto3" json:"methods,omitempty"`
	Types    []*dvm.Struct         `protobuf:"bytes,4,rep,name=types,proto3" json:"types,omitempty"`
	CodeType CompiledItem_CodeType `protobuf:"varint,5,opt,name=code_type,json=codeType,proto3,enum=dfinance.vm.v1beta1.CompiledItem_CodeType" json:"code_type,omitempty"`
}

func (m *CompiledItem) Reset()         { *m = CompiledItem{} }
func (m *CompiledItem) String() string { return proto.CompactTextString(m) }
func (*CompiledItem) ProtoMessage()    {}
func (*CompiledItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1fbbb471026580b, []int{2}
}
func (m *CompiledItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompiledItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompiledItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompiledItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompiledItem.Merge(m, src)
}
func (m *CompiledItem) XXX_Size() int {
	return m.Size()
}
func (m *CompiledItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CompiledItem.DiscardUnknown(m)
}

var xxx_messageInfo_CompiledItem proto.InternalMessageInfo

func (m *CompiledItem) GetByteCode() []byte {
	if m != nil {
		return m.ByteCode
	}
	return nil
}

func (m *CompiledItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CompiledItem) GetMethods() []*dvm.Function {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *CompiledItem) GetTypes() []*dvm.Struct {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *CompiledItem) GetCodeType() CompiledItem_CodeType {
	if m != nil {
		return m.CodeType
	}
	return CompiledItem_MODULE
}

func init() {
	proto.RegisterEnum("dfinance.vm.v1beta1.CompiledItem_CodeType", CompiledItem_CodeType_name, CompiledItem_CodeType_value)
	proto.RegisterType((*TxVmStatus)(nil), "dfinance.vm.v1beta1.TxVmStatus")
	proto.RegisterType((*VmStatus)(nil), "dfinance.vm.v1beta1.VmStatus")
	proto.RegisterType((*CompiledItem)(nil), "dfinance.vm.v1beta1.CompiledItem")
}

func init() { proto.RegisterFile("dfinance/vm/vm.proto", fileDescriptor_a1fbbb471026580b) }

var fileDescriptor_a1fbbb471026580b = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0xed, 0x34, 0x6d, 0x93, 0x6d, 0x9f, 0xbe, 0x6c, 0xfb, 0x20, 0xb7, 0x15, 0x76, 0x65,
	0x0e, 0x94, 0x0a, 0x6c, 0x5a, 0x38, 0xf5, 0x46, 0xcb, 0x8b, 0x2a, 0x81, 0x40, 0x9b, 0xc0, 0xa1,
	0x97, 0x68, 0x6d, 0x6f, 0x1d, 0xa3, 0xac, 0x37, 0xca, 0xae, 0xad, 0xe6, 0x13, 0x80, 0x38, 0x71,
	0x44, 0xe2, 0x92, 0x8f, 0xd3, 0x63, 0x8f, 0x9c, 0x2c, 0x94, 0x5c, 0x38, 0xfb, 0x13, 0x20, 0xef,
	0xda, 0x49, 0x5b, 0x7a, 0x9b, 0x9d, 0xff, 0x6f, 0x66, 0xfe, 0xbb, 0x1e, 0x83, 0xcd, 0xe0, 0x3c,
	0x8a, 0x71, 0xec, 0x13, 0x37, 0xa5, 0x6e, 0x4a, 0x9d, 0xfe, 0x80, 0x09, 0x06, 0x37, 0xaa, 0xac,
	0x93, 0x52, 0x27, 0x3d, 0xf0, 0x88, 0xc0, 0x07, 0xdb, 0x5b, 0x21, 0x63, 0x61, 0x8f, 0xb8, 0x12,
	0xf1, 0x92, 0x73, 0x17, 0xc7, 0x43, 0xc5, 0x6f, 0x5b, 0xb7, 0x25, 0x11, 0x51, 0xc2, 0x05, 0xa6,
	0xfd, 0x12, 0xd8, 0x0c, 0x59, 0xc8, 0x64, 0xe8, 0x16, 0x51, 0x99, 0xdd, 0xf2, 0x19, 0xa7, 0x8c,
	0x77, 0x94, 0xa0, 0x0e, 0x55, 0xc7, 0xa9, 0xaf, 0x20, 0xa5, 0xae, 0xcf, 0x28, 0x65, 0xf1, 0x13,
	0x31, 0xec, 0x93, 0x0a, 0xd8, 0xb9, 0x01, 0x50, 0x22, 0x70, 0x80, 0x05, 0x56, 0xa2, 0xfd, 0x53,
	0x07, 0xa0, 0x7d, 0xf1, 0x89, 0xb6, 0x04, 0x16, 0x09, 0x87, 0x0f, 0x40, 0xbd, 0x8b, 0x79, 0xd7,
	0xd0, 0x77, 0xf5, 0xbd, 0xe6, 0xf1, 0x6a, 0x9e, 0x59, 0x4b, 0x43, 0x4c, 0x7b, 0x47, 0x76, 0x91,
	0xb5, 0x91, 0x14, 0xe1, 0x19, 0x58, 0x4a, 0x69, 0x87, 0xcb, 0x0a, 0xc2, 0x8d, 0xda, 0xee, 0xdc,
	0xde, 0xd2, 0xe1, 0x7d, 0xe7, 0x8e, 0x97, 0x70, 0xaa, 0xc6, 0xc7, 0xdb, 0x97, 0x99, 0xa5, 0xe5,
	0x99, 0x05, 0x55, 0xbb, 0x6b, 0xf5, 0x36, 0x02, 0x69, 0x49, 0x11, 0x7e, 0xb4, 0xfc, 0x75, 0x64,
	0x69, 0x3f, 0x46, 0x96, 0xf6, 0x67, 0x64, 0x69, 0xf6, 0x97, 0x1a, 0x68, 0x4c, 0xbd, 0x3d, 0x02,
	0x0b, 0xaa, 0xa6, 0x74, 0xb7, 0x9e, 0x67, 0xd6, 0x7f, 0xaa, 0x9d, 0xca, 0xdb, 0xa8, 0x04, 0xe0,
	0x73, 0x00, 0x28, 0xfe, 0xcc, 0x06, 0x1d, 0x9f, 0x05, 0xc4, 0xa8, 0x49, 0xfc, 0xff, 0x3c, 0xb3,
	0xd6, 0x15, 0x3e, 0xd3, 0x6c, 0xd4, 0x94, 0x87, 0x13, 0x16, 0x10, 0xe8, 0x80, 0x06, 0x4f, 0x3c,
	0x55, 0x33, 0x27, 0x6b, 0x36, 0xf2, 0xcc, 0x5a, 0x2d, 0x47, 0x94, 0x8a, 0x8d, 0x16, 0x79, 0xe2,
	0x4d, 0x79, 0x51, 0xce, 0xa8, 0xff, 0xc3, 0x8b, 0xc1, 0x94, 0x17, 0xaa, 0xff, 0x63, 0xb0, 0x48,
	0x09, 0xe7, 0x38, 0x24, 0xc6, 0xbc, 0xc4, 0x61, 0x9e, 0x59, 0x2b, 0xa5, 0x25, 0x25, 0xd8, 0xa8,
	0x42, 0x6e, 0xbd, 0xc4, 0xb7, 0x1a, 0x58, 0x3e, 0x61, 0xb4, 0x1f, 0xf5, 0x48, 0x70, 0x2a, 0x08,
	0x85, 0x3b, 0xa0, 0xe9, 0x0d, 0x05, 0x51, 0xd3, 0x8b, 0x07, 0x59, 0x46, 0x8d, 0x22, 0x21, 0x27,
	0x41, 0x50, 0x8f, 0x31, 0x2d, 0x6f, 0x8e, 0x64, 0x0c, 0x9f, 0x16, 0xd3, 0x45, 0x97, 0x05, 0xdc,
	0x98, 0x93, 0x5f, 0xec, 0xde, 0xec, 0x8b, 0x05, 0x29, 0x75, 0x5e, 0x27, 0xb1, 0x2f, 0x22, 0x16,
	0xa3, 0x0a, 0x83, 0xfb, 0x60, 0x5e, 0xee, 0x91, 0x51, 0x97, 0xfc, 0xe6, 0x4d, 0xbe, 0x25, 0x06,
	0x89, 0x2f, 0x90, 0x42, 0xe0, 0x1b, 0xd0, 0x2c, 0x9c, 0x74, 0x8a, 0x93, 0xbc, 0xdd, 0xca, 0xe1,
	0xfe, 0x9d, 0x1b, 0x71, 0xfd, 0x12, 0x4e, 0x61, 0xb6, 0x3d, 0xec, 0x13, 0xd4, 0xf0, 0xcb, 0xc8,
	0xb6, 0x41, 0xa3, 0xca, 0x42, 0x00, 0x16, 0xde, 0xbd, 0x7f, 0xf9, 0xf1, 0xed, 0xab, 0x35, 0xad,
	0x88, 0x5b, 0x27, 0xe8, 0xf4, 0x43, 0x7b, 0x4d, 0x3f, 0x7e, 0x71, 0x39, 0x36, 0xf5, 0xab, 0xb1,
	0xa9, 0xff, 0x1e, 0x9b, 0xfa, 0xf7, 0x89, 0xa9, 0x5d, 0x4d, 0x4c, 0xed, 0xd7, 0xc4, 0xd4, 0xce,
	0x1e, 0x86, 0x91, 0xe8, 0x26, 0x9e, 0xe3, 0x33, 0xea, 0xce, 0xd6, 0xbe, 0xd8, 0x8a, 0x88, 0xc5,
	0xee, 0x45, 0xf1, 0xeb, 0x4a, 0xbf, 0xde, 0x82, 0x5c, 0xff, 0x67, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xc1, 0x3f, 0x57, 0xf2, 0xd6, 0x03, 0x00, 0x00,
}

func (m *TxVmStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxVmStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxVmStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VmStatuses) > 0 {
		for iNdEx := len(m.VmStatuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VmStatuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VmStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StrCode) > 0 {
		i -= len(m.StrCode)
		copy(dAtA[i:], m.StrCode)
		i = encodeVarintVm(dAtA, i, uint64(len(m.StrCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubCode) > 0 {
		i -= len(m.SubCode)
		copy(dAtA[i:], m.SubCode)
		i = encodeVarintVm(dAtA, i, uint64(len(m.SubCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MajorCode) > 0 {
		i -= len(m.MajorCode)
		copy(dAtA[i:], m.MajorCode)
		i = encodeVarintVm(dAtA, i, uint64(len(m.MajorCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompiledItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompiledItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompiledItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CodeType != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.CodeType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Types[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Methods) > 0 {
		for iNdEx := len(m.Methods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Methods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ByteCode) > 0 {
		i -= len(m.ByteCode)
		copy(dAtA[i:], m.ByteCode)
		i = encodeVarintVm(dAtA, i, uint64(len(m.ByteCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVm(dAtA []byte, offset int, v uint64) int {
	offset -= sovVm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxVmStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if len(m.VmStatuses) > 0 {
		for _, e := range m.VmStatuses {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	return n
}

func (m *VmStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.MajorCode)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.SubCode)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.StrCode)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *CompiledItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ByteCode)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if len(m.Methods) > 0 {
		for _, e := range m.Methods {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	if m.CodeType != 0 {
		n += 1 + sovVm(uint64(m.CodeType))
	}
	return n
}

func sovVm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVm(x uint64) (n int) {
	return sovVm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxVmStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxVmStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxVmStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmStatuses = append(m.VmStatuses, VmStatus{})
			if err := m.VmStatuses[len(m.VmStatuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MajorCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompiledItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompiledItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompiledItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ByteCode = append(m.ByteCode[:0], dAtA[iNdEx:postIndex]...)
			if m.ByteCode == nil {
				m.ByteCode = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Methods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Methods = append(m.Methods, &dvm.Function{})
			if err := m.Methods[len(m.Methods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, &dvm.Struct{})
			if err := m.Types[len(m.Types)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeType", wireType)
			}
			m.CodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeType |= CompiledItem_CodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVm = fmt.Errorf("proto: unexpected end of group")
)
