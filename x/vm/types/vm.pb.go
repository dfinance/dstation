// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dfinance/vm/vm.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types_grpc "github.com/dfinance/dvm-proto/go/types_grpc"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgExecuteScript defines a SDK message to execute a script with args to VM.
type MsgExecuteScript struct {
	// Script sender address
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	// Script code
	Script []byte                       `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty" yaml:"script"`
	Args   []MsgExecuteScript_ScriptArg `protobuf:"bytes,3,rep,name=args,proto3" json:"args" yaml:"args"`
}

func (m *MsgExecuteScript) Reset()         { *m = MsgExecuteScript{} }
func (m *MsgExecuteScript) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteScript) ProtoMessage()    {}
func (*MsgExecuteScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1fbbb471026580b, []int{0}
}
func (m *MsgExecuteScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteScript.Merge(m, src)
}
func (m *MsgExecuteScript) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteScript) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteScript.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteScript proto.InternalMessageInfo

type MsgExecuteScript_ScriptArg struct {
	Type  types_grpc.VMTypeTag `protobuf:"varint,1,opt,name=type,proto3,enum=types.VMTypeTag" json:"type,omitempty" yaml:"type"`
	Value []byte               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" yaml:"value"`
}

func (m *MsgExecuteScript_ScriptArg) Reset()         { *m = MsgExecuteScript_ScriptArg{} }
func (m *MsgExecuteScript_ScriptArg) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteScript_ScriptArg) ProtoMessage()    {}
func (*MsgExecuteScript_ScriptArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1fbbb471026580b, []int{0, 0}
}
func (m *MsgExecuteScript_ScriptArg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteScript_ScriptArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteScript_ScriptArg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteScript_ScriptArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteScript_ScriptArg.Merge(m, src)
}
func (m *MsgExecuteScript_ScriptArg) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteScript_ScriptArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteScript_ScriptArg.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteScript_ScriptArg proto.InternalMessageInfo

// MsgDeployModule defines a SDK message to deploy a module (contract) to VM.
type MsgDeployModule struct {
	// Script sender address
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	// Module code
	Modules [][]byte `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty" yaml:"modules"`
}

func (m *MsgDeployModule) Reset()         { *m = MsgDeployModule{} }
func (m *MsgDeployModule) String() string { return proto.CompactTextString(m) }
func (*MsgDeployModule) ProtoMessage()    {}
func (*MsgDeployModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1fbbb471026580b, []int{1}
}
func (m *MsgDeployModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeployModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeployModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeployModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeployModule.Merge(m, src)
}
func (m *MsgDeployModule) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeployModule) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeployModule.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeployModule proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgExecuteScript)(nil), "dfinance.vm.v1beta1.MsgExecuteScript")
	proto.RegisterType((*MsgExecuteScript_ScriptArg)(nil), "dfinance.vm.v1beta1.MsgExecuteScript.ScriptArg")
	proto.RegisterType((*MsgDeployModule)(nil), "dfinance.vm.v1beta1.MsgDeployModule")
}

func init() { proto.RegisterFile("dfinance/vm/vm.proto", fileDescriptor_a1fbbb471026580b) }

var fileDescriptor_a1fbbb471026580b = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x6e, 0xd4, 0x30,
	0x18, 0xc7, 0x93, 0xbb, 0x52, 0xa8, 0x7b, 0xb4, 0x47, 0xda, 0xe1, 0x7a, 0x42, 0xf1, 0xc9, 0x03,
	0x1c, 0x12, 0xd8, 0x6a, 0x11, 0x4b, 0xb7, 0x46, 0x30, 0xde, 0x12, 0x2a, 0x84, 0x58, 0x90, 0x2f,
	0xe7, 0x9a, 0x48, 0x71, 0x1c, 0xc5, 0x4e, 0xd4, 0xbc, 0x01, 0x23, 0x8f, 0xd0, 0x67, 0x61, 0xea,
	0xd8, 0x91, 0x29, 0x42, 0x77, 0x0b, 0x73, 0x9e, 0x00, 0xc5, 0x4e, 0xef, 0xc4, 0x89, 0xa5, 0x53,
	0xbe, 0xfc, 0xff, 0x3f, 0xff, 0xed, 0xef, 0xd3, 0x07, 0x8e, 0x17, 0x57, 0x71, 0x4a, 0xd3, 0x88,
	0x91, 0x52, 0x90, 0x52, 0xe0, 0x2c, 0x97, 0x5a, 0x7a, 0x47, 0xf7, 0x2a, 0x2e, 0x05, 0x2e, 0x4f,
	0xe7, 0x4c, 0xd3, 0xd3, 0xf1, 0x09, 0x97, 0x92, 0x27, 0x8c, 0x18, 0x64, 0x5e, 0x5c, 0x11, 0x9a,
	0x56, 0x96, 0x1f, 0xc3, 0x6d, 0x4b, 0xc7, 0x82, 0x29, 0x4d, 0x45, 0xd6, 0x01, 0xc7, 0x5c, 0x72,
	0x69, 0x4a, 0xd2, 0x56, 0x9d, 0x7a, 0x12, 0x49, 0x25, 0xa4, 0xfa, 0x6a, 0x0d, 0xfb, 0xd3, 0x59,
	0xcf, 0x17, 0xa5, 0x58, 0xeb, 0x42, 0xc8, 0xf4, 0x8d, 0xae, 0x32, 0xd6, 0xb9, 0xe8, 0x67, 0x0f,
	0x0c, 0x67, 0x8a, 0x7f, 0xb8, 0x66, 0x51, 0xa1, 0xd9, 0xc7, 0x28, 0x8f, 0x33, 0xed, 0xbd, 0x02,
	0xbb, 0x2a, 0xe6, 0x29, 0xcb, 0x47, 0xee, 0xc4, 0x9d, 0xee, 0x05, 0xcf, 0x9a, 0x1a, 0x3e, 0xad,
	0xa8, 0x48, 0xce, 0x91, 0xd5, 0x51, 0xd8, 0x01, 0x06, 0x35, 0x87, 0x46, 0xbd, 0x89, 0x3b, 0x1d,
	0xfc, 0x83, 0x1a, 0xbd, 0x45, 0x6d, 0xea, 0x67, 0xb0, 0x43, 0x73, 0xae, 0x46, 0xfd, 0x49, 0x7f,
	0xba, 0x7f, 0x46, 0xf0, 0x7f, 0x26, 0x83, 0xb7, 0x9f, 0x82, 0xed, 0xe7, 0x22, 0xe7, 0xc1, 0xd1,
	0x6d, 0x0d, 0x9d, 0xa6, 0x86, 0xfb, 0x36, 0xbd, 0x8d, 0x42, 0xa1, 0x49, 0x1c, 0x6b, 0xb0, 0xb7,
	0xe6, 0xbc, 0x77, 0x60, 0xa7, 0x6d, 0xd0, 0x3c, 0xfd, 0xe0, 0x6c, 0x88, 0x6d, 0xb7, 0x9f, 0x66,
	0x97, 0x55, 0xc6, 0x2e, 0x29, 0x0f, 0x0e, 0x37, 0x19, 0xad, 0x85, 0x42, 0x83, 0x7b, 0x2f, 0xc0,
	0xa3, 0x92, 0x26, 0x05, 0xeb, 0xfa, 0x18, 0x36, 0x35, 0x1c, 0x58, 0xca, 0xc8, 0x28, 0xb4, 0xf6,
	0xf9, 0x93, 0xef, 0x37, 0xd0, 0xf9, 0x73, 0x03, 0x9d, 0x4d, 0x85, 0x34, 0x38, 0x9c, 0x29, 0xfe,
	0x9e, 0x65, 0x89, 0xac, 0x66, 0x72, 0x51, 0x24, 0xec, 0x21, 0x23, 0x7c, 0x0d, 0x1e, 0x0b, 0x73,
	0x48, 0x8d, 0x7a, 0x93, 0xfe, 0x74, 0x10, 0x78, 0x4d, 0x0d, 0x0f, 0x2c, 0xdb, 0x19, 0x28, 0xbc,
	0x47, 0x36, 0xb7, 0x06, 0x17, 0xb7, 0x4b, 0xdf, 0xbd, 0x5b, 0xfa, 0xee, 0xef, 0xa5, 0xef, 0xfe,
	0x58, 0xf9, 0xce, 0xdd, 0xca, 0x77, 0x7e, 0xad, 0x7c, 0xe7, 0xcb, 0x4b, 0x1e, 0xeb, 0x6f, 0xc5,
	0x1c, 0x47, 0x52, 0x90, 0xf5, 0x56, 0x2e, 0x94, 0xa6, 0x3a, 0x96, 0x29, 0xb9, 0x6e, 0x17, 0xd4,
	0x4c, 0x65, 0xbe, 0x6b, 0x96, 0xe0, 0xed, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0xef, 0xc5,
	0x37, 0xbc, 0x02, 0x00, 0x00,
}

func (m *MsgExecuteScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Script) > 0 {
		i -= len(m.Script)
		copy(dAtA[i:], m.Script)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Script)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteScript_ScriptArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteScript_ScriptArg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteScript_ScriptArg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeployModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeployModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeployModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modules[iNdEx])
			copy(dAtA[i:], m.Modules[iNdEx])
			i = encodeVarintVm(dAtA, i, uint64(len(m.Modules[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVm(dAtA []byte, offset int, v uint64) int {
	offset -= sovVm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgExecuteScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Script)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	return n
}

func (m *MsgExecuteScript_ScriptArg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovVm(uint64(m.Type))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *MsgDeployModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, b := range m.Modules {
			l = len(b)
			n += 1 + l + sovVm(uint64(l))
		}
	}
	return n
}

func sovVm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVm(x uint64) (n int) {
	return sovVm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgExecuteScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Script = append(m.Script[:0], dAtA[iNdEx:postIndex]...)
			if m.Script == nil {
				m.Script = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, MsgExecuteScript_ScriptArg{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteScript_ScriptArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScriptArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScriptArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= types_grpc.VMTypeTag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeployModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeployModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeployModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, make([]byte, postIndex-iNdEx))
			copy(m.Modules[len(m.Modules)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVm = fmt.Errorf("proto: unexpected end of group")
)
