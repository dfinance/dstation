// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dfinance/vm/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	dvm "github.com/dfinance/dstation/pkg/types/dvm"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgExecuteScript defines a SDK message to execute a script with args to VM.
type MsgExecuteScript struct {
	// Script sender address
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	// Script code
	Script []byte                       `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty" yaml:"script"`
	Args   []MsgExecuteScript_ScriptArg `protobuf:"bytes,3,rep,name=args,proto3" json:"args" yaml:"args"`
}

func (m *MsgExecuteScript) Reset()         { *m = MsgExecuteScript{} }
func (m *MsgExecuteScript) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteScript) ProtoMessage()    {}
func (*MsgExecuteScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_34dee0a1e38a2d4b, []int{0}
}
func (m *MsgExecuteScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteScript.Merge(m, src)
}
func (m *MsgExecuteScript) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteScript) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteScript.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteScript proto.InternalMessageInfo

type MsgExecuteScript_ScriptArg struct {
	Type  dvm.VMTypeTag `protobuf:"varint,1,opt,name=type,proto3,enum=dfinance.dvm.VMTypeTag" json:"type,omitempty" yaml:"type"`
	Value []byte        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" yaml:"value"`
}

func (m *MsgExecuteScript_ScriptArg) Reset()         { *m = MsgExecuteScript_ScriptArg{} }
func (m *MsgExecuteScript_ScriptArg) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteScript_ScriptArg) ProtoMessage()    {}
func (*MsgExecuteScript_ScriptArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_34dee0a1e38a2d4b, []int{0, 0}
}
func (m *MsgExecuteScript_ScriptArg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteScript_ScriptArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteScript_ScriptArg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteScript_ScriptArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteScript_ScriptArg.Merge(m, src)
}
func (m *MsgExecuteScript_ScriptArg) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteScript_ScriptArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteScript_ScriptArg.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteScript_ScriptArg proto.InternalMessageInfo

// MsgDeployModule defines a SDK message to deploy a module (contract) to VM.
type MsgDeployModule struct {
	// Script sender address
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	// Module code
	Modules [][]byte `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty" yaml:"modules"`
}

func (m *MsgDeployModule) Reset()         { *m = MsgDeployModule{} }
func (m *MsgDeployModule) String() string { return proto.CompactTextString(m) }
func (*MsgDeployModule) ProtoMessage()    {}
func (*MsgDeployModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_34dee0a1e38a2d4b, []int{1}
}
func (m *MsgDeployModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeployModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeployModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeployModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeployModule.Merge(m, src)
}
func (m *MsgDeployModule) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeployModule) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeployModule.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeployModule proto.InternalMessageInfo

type MsgDeployModuleResponse struct {
}

func (m *MsgDeployModuleResponse) Reset()         { *m = MsgDeployModuleResponse{} }
func (m *MsgDeployModuleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeployModuleResponse) ProtoMessage()    {}
func (*MsgDeployModuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34dee0a1e38a2d4b, []int{2}
}
func (m *MsgDeployModuleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeployModuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeployModuleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeployModuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeployModuleResponse.Merge(m, src)
}
func (m *MsgDeployModuleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeployModuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeployModuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeployModuleResponse proto.InternalMessageInfo

type MsgExecuteScriptResponse struct {
}

func (m *MsgExecuteScriptResponse) Reset()         { *m = MsgExecuteScriptResponse{} }
func (m *MsgExecuteScriptResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteScriptResponse) ProtoMessage()    {}
func (*MsgExecuteScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34dee0a1e38a2d4b, []int{3}
}
func (m *MsgExecuteScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteScriptResponse.Merge(m, src)
}
func (m *MsgExecuteScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteScriptResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgExecuteScript)(nil), "dfinance.vm.v1beta1.MsgExecuteScript")
	proto.RegisterType((*MsgExecuteScript_ScriptArg)(nil), "dfinance.vm.v1beta1.MsgExecuteScript.ScriptArg")
	proto.RegisterType((*MsgDeployModule)(nil), "dfinance.vm.v1beta1.MsgDeployModule")
	proto.RegisterType((*MsgDeployModuleResponse)(nil), "dfinance.vm.v1beta1.MsgDeployModuleResponse")
	proto.RegisterType((*MsgExecuteScriptResponse)(nil), "dfinance.vm.v1beta1.MsgExecuteScriptResponse")
}

func init() { proto.RegisterFile("dfinance/vm/tx.proto", fileDescriptor_34dee0a1e38a2d4b) }

var fileDescriptor_34dee0a1e38a2d4b = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xed, 0xa4, 0x14, 0xba, 0x4d, 0x3f, 0x70, 0x2b, 0x35, 0x18, 0x64, 0x47, 0xe6, 0x2b,
	0x48, 0xad, 0x57, 0x0d, 0xb7, 0x8a, 0x4b, 0x23, 0x38, 0xfa, 0x62, 0x2a, 0x84, 0xb8, 0xad, 0xed,
	0x65, 0xb1, 0xe4, 0xf5, 0x5a, 0xde, 0x8d, 0x95, 0x88, 0x17, 0xe0, 0xc8, 0x23, 0xf4, 0x71, 0xca,
	0x2d, 0x47, 0x4e, 0x16, 0x4a, 0x2e, 0x9c, 0xf3, 0x04, 0xc8, 0xbb, 0x76, 0xd3, 0x44, 0x20, 0x85,
	0x53, 0x36, 0xf3, 0xff, 0xcd, 0x7f, 0x66, 0x67, 0x3d, 0xe0, 0x38, 0xfa, 0x1c, 0xa7, 0x28, 0x0d,
	0x31, 0x2c, 0x28, 0x14, 0x63, 0x37, 0xcb, 0x99, 0x60, 0xc6, 0x51, 0x13, 0x75, 0x0b, 0xea, 0x16,
	0xe7, 0x01, 0x16, 0xe8, 0xdc, 0x3c, 0x26, 0x8c, 0x30, 0xa9, 0xc3, 0xea, 0xa4, 0x50, 0xf3, 0x09,
	0x61, 0x8c, 0x24, 0x18, 0xa2, 0x2c, 0x86, 0x28, 0x4d, 0x99, 0x40, 0x22, 0x66, 0x29, 0xaf, 0xd5,
	0xa7, 0x21, 0xe3, 0x94, 0x71, 0x18, 0x20, 0x8e, 0x21, 0x0a, 0xc2, 0x18, 0xd6, 0x6e, 0xf2, 0x4f,
	0x0d, 0xd9, 0xb7, 0x3d, 0x44, 0x05, 0x85, 0x21, 0xa3, 0x94, 0xa5, 0x67, 0x62, 0x92, 0xe1, 0xc6,
	0xe5, 0xf1, 0x0a, 0x40, 0xb1, 0x40, 0x11, 0x12, 0x48, 0x89, 0xce, 0x8f, 0x16, 0x38, 0xf4, 0x38,
	0x79, 0x37, 0xc6, 0xe1, 0x48, 0xe0, 0xf7, 0x61, 0x1e, 0x67, 0xc2, 0x78, 0x05, 0xb6, 0x79, 0x4c,
	0x52, 0x9c, 0x77, 0xf5, 0x9e, 0xde, 0xdf, 0x19, 0x3e, 0x5c, 0x94, 0xf6, 0xde, 0x04, 0xd1, 0xe4,
	0xc2, 0x51, 0x71, 0xc7, 0xaf, 0x01, 0x89, 0xca, 0xa4, 0x6e, 0xab, 0xa7, 0xf7, 0x3b, 0x2b, 0xa8,
	0x8c, 0x57, 0xa8, 0x72, 0xfd, 0x08, 0xb6, 0x50, 0x4e, 0x78, 0xb7, 0xdd, 0x6b, 0xf7, 0x77, 0x07,
	0xd0, 0xfd, 0xcb, 0x94, 0xdc, 0xf5, 0x56, 0x5c, 0xf5, 0x73, 0x99, 0x93, 0xe1, 0xd1, 0x4d, 0x69,
	0x6b, 0x8b, 0xd2, 0xde, 0x55, 0xee, 0x95, 0x95, 0xe3, 0x4b, 0x47, 0xf3, 0x2b, 0xd8, 0xb9, 0xe5,
	0x8c, 0x37, 0x60, 0xab, 0xba, 0xbd, 0x6c, 0x7d, 0x7f, 0x70, 0xb2, 0x2c, 0x13, 0x15, 0xd4, 0xfd,
	0xe0, 0x5d, 0x4d, 0x32, 0x7c, 0x85, 0xc8, 0xf0, 0x60, 0x69, 0x55, 0xe1, 0x8e, 0x2f, 0xb3, 0x8c,
	0x17, 0xe0, 0x5e, 0x81, 0x92, 0x11, 0xae, 0xaf, 0x73, 0xb8, 0x28, 0xed, 0x8e, 0xa2, 0x64, 0xd8,
	0xf1, 0x95, 0x7c, 0xf1, 0xe0, 0xdb, 0xb5, 0xad, 0xfd, 0xbe, 0xb6, 0xb5, 0xe5, 0xc9, 0x11, 0xe0,
	0xc0, 0xe3, 0xe4, 0x2d, 0xce, 0x12, 0x36, 0xf1, 0x58, 0x34, 0x4a, 0xf0, 0xff, 0x4c, 0xf2, 0x14,
	0xdc, 0xa7, 0x32, 0x89, 0x77, 0x5b, 0xbd, 0x76, 0xbf, 0x33, 0x34, 0x16, 0xa5, 0xbd, 0xaf, 0xd8,
	0x5a, 0x70, 0xfc, 0x06, 0xb9, 0x53, 0xf5, 0x11, 0x38, 0x59, 0xab, 0xea, 0x63, 0x9e, 0xb1, 0x94,
	0x63, 0xc7, 0x04, 0xdd, 0xf5, 0x81, 0x36, 0xda, 0x60, 0xaa, 0x83, 0xb6, 0xc7, 0x89, 0x11, 0x80,
	0xce, 0x4a, 0xc7, 0xcf, 0xfe, 0xf5, 0x2e, 0x77, 0x29, 0xf3, 0x74, 0x13, 0xaa, 0xa9, 0x65, 0x60,
	0xb0, 0xb7, 0xfa, 0x81, 0x3d, 0xdf, 0xe8, 0xf1, 0xcd, 0xb3, 0x8d, 0xb0, 0xa6, 0xcc, 0xf0, 0xf2,
	0x66, 0x66, 0xe9, 0xd3, 0x99, 0xa5, 0xff, 0x9a, 0x59, 0xfa, 0xf7, 0xb9, 0xa5, 0x4d, 0xe7, 0x96,
	0xf6, 0x73, 0x6e, 0x69, 0x9f, 0x5e, 0x92, 0x58, 0x7c, 0x19, 0x05, 0x6e, 0xc8, 0x28, 0x5c, 0x6e,
	0x03, 0x57, 0xdb, 0x06, 0xc7, 0x72, 0x7b, 0xab, 0x8d, 0x09, 0xb6, 0xe5, 0x56, 0xbc, 0xfe, 0x13,
	0x00, 0x00, 0xff, 0xff, 0xbf, 0x7b, 0xc2, 0xa9, 0xd9, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// DeployModule deploys Move module/modules to VMStorage.
	DeployModule(ctx context.Context, in *MsgDeployModule, opts ...grpc.CallOption) (*MsgDeployModuleResponse, error)
	// ExecuteScript executes provided Move script.
	ExecuteScript(ctx context.Context, in *MsgExecuteScript, opts ...grpc.CallOption) (*MsgExecuteScriptResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DeployModule(ctx context.Context, in *MsgDeployModule, opts ...grpc.CallOption) (*MsgDeployModuleResponse, error) {
	out := new(MsgDeployModuleResponse)
	err := c.cc.Invoke(ctx, "/dfinance.vm.v1beta1.Msg/DeployModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteScript(ctx context.Context, in *MsgExecuteScript, opts ...grpc.CallOption) (*MsgExecuteScriptResponse, error) {
	out := new(MsgExecuteScriptResponse)
	err := c.cc.Invoke(ctx, "/dfinance.vm.v1beta1.Msg/ExecuteScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// DeployModule deploys Move module/modules to VMStorage.
	DeployModule(context.Context, *MsgDeployModule) (*MsgDeployModuleResponse, error)
	// ExecuteScript executes provided Move script.
	ExecuteScript(context.Context, *MsgExecuteScript) (*MsgExecuteScriptResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DeployModule(ctx context.Context, req *MsgDeployModule) (*MsgDeployModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployModule not implemented")
}
func (*UnimplementedMsgServer) ExecuteScript(ctx context.Context, req *MsgExecuteScript) (*MsgExecuteScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteScript not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DeployModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeployModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeployModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.vm.v1beta1.Msg/DeployModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeployModule(ctx, req.(*MsgDeployModule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.vm.v1beta1.Msg/ExecuteScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteScript(ctx, req.(*MsgExecuteScript))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfinance.vm.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployModule",
			Handler:    _Msg_DeployModule_Handler,
		},
		{
			MethodName: "ExecuteScript",
			Handler:    _Msg_ExecuteScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfinance/vm/tx.proto",
}

func (m *MsgExecuteScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Script) > 0 {
		i -= len(m.Script)
		copy(dAtA[i:], m.Script)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Script)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteScript_ScriptArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteScript_ScriptArg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteScript_ScriptArg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeployModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeployModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeployModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modules[iNdEx])
			copy(dAtA[i:], m.Modules[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Modules[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeployModuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeployModuleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeployModuleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecuteScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgExecuteScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Script)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgExecuteScript_ScriptArg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTx(uint64(m.Type))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeployModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, b := range m.Modules {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDeployModuleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecuteScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgExecuteScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Script = append(m.Script[:0], dAtA[iNdEx:postIndex]...)
			if m.Script == nil {
				m.Script = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, MsgExecuteScript_ScriptArg{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteScript_ScriptArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScriptArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScriptArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= dvm.VMTypeTag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeployModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeployModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeployModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, make([]byte, postIndex-iNdEx))
			copy(m.Modules[len(m.Modules)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeployModuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeployModuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeployModuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
