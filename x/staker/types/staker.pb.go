// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dfinance/staker/staker.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Call_CallType int32

const (
	Call_DEPOSIT  Call_CallType = 0
	Call_WITHDRAW Call_CallType = 1
)

var Call_CallType_name = map[int32]string{
	0: "DEPOSIT",
	1: "WITHDRAW",
}

var Call_CallType_value = map[string]int32{
	"DEPOSIT":  0,
	"WITHDRAW": 1,
}

func (x Call_CallType) String() string {
	return proto.EnumName(Call_CallType_name, int32(x))
}

func (Call_CallType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7f96d40f653f9129, []int{1, 0}
}

// CallSourceMeta keeps optional Call operation source data.
type CallSourceMeta struct {
	// Ethereum address
	EthAddress string `protobuf:"bytes,1,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
	// Chain ID
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *CallSourceMeta) Reset()         { *m = CallSourceMeta{} }
func (m *CallSourceMeta) String() string { return proto.CompactTextString(m) }
func (*CallSourceMeta) ProtoMessage()    {}
func (*CallSourceMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f96d40f653f9129, []int{0}
}
func (m *CallSourceMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallSourceMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallSourceMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallSourceMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallSourceMeta.Merge(m, src)
}
func (m *CallSourceMeta) XXX_Size() int {
	return m.Size()
}
func (m *CallSourceMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_CallSourceMeta.DiscardUnknown(m)
}

var xxx_messageInfo_CallSourceMeta proto.InternalMessageInfo

func (m *CallSourceMeta) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *CallSourceMeta) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// Call keeps Staker operation data.
type Call struct {
	// Call ID (series, defined by module)
	Id github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"id" yaml:"id"`
	// Unique operation ID (defined by nominee)
	// Ethereum Tx for example
	UniqueId string `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty" yaml:"unique_id"`
	// Operation authorized by address
	Nominee string `protobuf:"bytes,3,opt,name=nominee,proto3" json:"nominee,omitempty" yaml:"nominee"`
	// Operation target account address
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// Operation direction (mint / destroy)
	Type Call_CallType `protobuf:"varint,5,opt,name=type,proto3,enum=dfinance.staker.v1beta1.Call_CallType" json:"type,omitempty" yaml:"type"`
	// Call operation source data (optional)
	SourceMeta CallSourceMeta `protobuf:"bytes,6,opt,name=source_meta,json=sourceMeta,proto3" json:"source_meta" yaml:"source_meta"`
	// Operation coins
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
	// Operation createdAt
	Timestamp time.Time `protobuf:"bytes,8,opt,name=timestamp,proto3,stdtime" json:"timestamp" yaml:"timestamp"`
}

func (m *Call) Reset()         { *m = Call{} }
func (m *Call) String() string { return proto.CompactTextString(m) }
func (*Call) ProtoMessage()    {}
func (*Call) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f96d40f653f9129, []int{1}
}
func (m *Call) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Call) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Call.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Call) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Call.Merge(m, src)
}
func (m *Call) XXX_Size() int {
	return m.Size()
}
func (m *Call) XXX_DiscardUnknown() {
	xxx_messageInfo_Call.DiscardUnknown(m)
}

var xxx_messageInfo_Call proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("dfinance.staker.v1beta1.Call_CallType", Call_CallType_name, Call_CallType_value)
	proto.RegisterType((*CallSourceMeta)(nil), "dfinance.staker.v1beta1.CallSourceMeta")
	proto.RegisterType((*Call)(nil), "dfinance.staker.v1beta1.Call")
}

func init() { proto.RegisterFile("dfinance/staker/staker.proto", fileDescriptor_7f96d40f653f9129) }

var fileDescriptor_7f96d40f653f9129 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x3c,
	0x1c, 0x4f, 0xf6, 0xd6, 0xd6, 0x7d, 0x9e, 0x31, 0x59, 0x93, 0xc8, 0xaa, 0x29, 0xae, 0x2c, 0xc1,
	0x2a, 0x01, 0x89, 0x36, 0x6e, 0x13, 0x97, 0x85, 0x4d, 0xa2, 0x62, 0x08, 0x94, 0x15, 0x26, 0x71,
	0xa9, 0xdc, 0xda, 0x6b, 0xad, 0x35, 0x71, 0xa9, 0x1d, 0xc4, 0xbe, 0x01, 0xc7, 0x5d, 0xb8, 0xef,
	0xcc, 0x27, 0xd9, 0x71, 0x47, 0xc4, 0x21, 0x43, 0xdb, 0x85, 0x73, 0x3f, 0x01, 0x8a, 0xed, 0xb4,
	0x13, 0x12, 0x88, 0x4b, 0x62, 0xfb, 0xf7, 0xf2, 0xf7, 0xff, 0xc5, 0x60, 0x93, 0x9e, 0xf0, 0x94,
	0xa4, 0x7d, 0x16, 0x4a, 0x45, 0x4e, 0xd9, 0xc4, 0xfe, 0x82, 0xf1, 0x44, 0x28, 0x01, 0xef, 0x97,
	0x68, 0x60, 0x8f, 0x3f, 0x6e, 0xf7, 0x98, 0x22, 0xdb, 0x0d, 0x34, 0x10, 0x62, 0x30, 0x62, 0xa1,
	0xa6, 0xf5, 0xb2, 0x93, 0x50, 0xf1, 0x84, 0x49, 0x45, 0x92, 0xb1, 0x51, 0x36, 0xd6, 0x07, 0x62,
	0x20, 0xf4, 0x32, 0x2c, 0x56, 0xf6, 0x74, 0xa3, 0x2f, 0x64, 0x22, 0x64, 0xd7, 0x00, 0x66, 0x63,
	0x21, 0xdf, 0xec, 0xc2, 0x1e, 0x91, 0x2c, 0xb4, 0x61, 0xc2, 0xbe, 0xe0, 0xa9, 0xc1, 0xf1, 0x21,
	0x58, 0x7d, 0x4e, 0x46, 0xa3, 0x23, 0x91, 0x4d, 0xfa, 0xec, 0x15, 0x53, 0x04, 0x22, 0x50, 0x67,
	0x6a, 0xd8, 0x25, 0x94, 0x4e, 0x98, 0x94, 0x9e, 0xdb, 0x74, 0x5b, 0xb5, 0x18, 0x30, 0x35, 0xdc,
	0x33, 0x27, 0x70, 0x03, 0x54, 0xfb, 0x43, 0xc2, 0xd3, 0x2e, 0xa7, 0xde, 0x82, 0x46, 0x2b, 0x7a,
	0xdf, 0xa6, 0xf8, 0xcb, 0x32, 0x58, 0x2a, 0xec, 0xe0, 0x21, 0x58, 0xe0, 0xd4, 0x68, 0xa3, 0x67,
	0x97, 0x39, 0x72, 0xbe, 0xe7, 0x68, 0x6b, 0xc0, 0xd5, 0x30, 0xeb, 0x05, 0x7d, 0x91, 0xd8, 0x3b,
	0xda, 0xdf, 0x13, 0x49, 0x4f, 0x43, 0x75, 0x36, 0x66, 0x32, 0x78, 0xcb, 0x53, 0x35, 0xcd, 0x51,
	0xed, 0x8c, 0x24, 0xa3, 0x5d, 0xcc, 0x29, 0x8e, 0x17, 0x38, 0x85, 0xdb, 0xa0, 0x96, 0xa5, 0xfc,
	0x43, 0xc6, 0x66, 0x21, 0xa3, 0xf5, 0x69, 0x8e, 0xd6, 0x0c, 0x6b, 0x06, 0xe1, 0xb8, 0x6a, 0xd6,
	0x6d, 0x0a, 0x1f, 0x83, 0x4a, 0x2a, 0x12, 0x9e, 0x32, 0xe6, 0x2d, 0x6a, 0x01, 0x9c, 0xe6, 0x68,
	0xd5, 0x08, 0x2c, 0x80, 0xe3, 0x92, 0x52, 0xb0, 0xcb, 0x7c, 0x97, 0x7e, 0x67, 0x5b, 0x00, 0xc7,
	0x25, 0x05, 0xbe, 0x04, 0x4b, 0xc5, 0x6d, 0xbd, 0xe5, 0xa6, 0xdb, 0x5a, 0xdd, 0x79, 0x18, 0xfc,
	0xa1, 0x9b, 0x41, 0x51, 0x09, 0xfd, 0xe9, 0x9c, 0x8d, 0x59, 0x74, 0x6f, 0x9a, 0xa3, 0xba, 0xb1,
	0x2c, 0xd4, 0x38, 0xd6, 0x26, 0x90, 0x82, 0xba, 0xd4, 0xc5, 0xef, 0x26, 0x4c, 0x11, 0x6f, 0xa5,
	0xe9, 0xb6, 0xea, 0x3b, 0x5b, 0x7f, 0xf5, 0x9c, 0x37, 0x2b, 0x6a, 0x14, 0xb5, 0x9d, 0xe6, 0x08,
	0x1a, 0xe3, 0x3b, 0x4e, 0x38, 0x06, 0x72, 0xde, 0x54, 0x05, 0x56, 0x48, 0x22, 0xb2, 0x54, 0x79,
	0x95, 0xe6, 0x62, 0xab, 0xbe, 0xb3, 0x11, 0xd8, 0x29, 0x29, 0xe6, 0x62, 0x6e, 0x2e, 0x78, 0x1a,
	0xed, 0x59, 0xcb, 0xff, 0x6d, 0xfa, 0x5a, 0x86, 0xbf, 0x5e, 0xa3, 0xd6, 0x3f, 0xf4, 0xaf, 0x70,
	0x90, 0xb1, 0x8d, 0x05, 0xdf, 0x81, 0xda, 0x6c, 0x80, 0xbd, 0xaa, 0xce, 0xac, 0x11, 0x98, 0x11,
	0x0f, 0xca, 0x11, 0x0f, 0x3a, 0x25, 0x23, 0xda, 0xb4, 0x91, 0x6d, 0x5f, 0x67, 0x52, 0x7c, 0x7e,
	0x8d, 0xdc, 0x78, 0x6e, 0x85, 0x1f, 0x80, 0x6a, 0x59, 0x56, 0x58, 0x07, 0x95, 0xfd, 0x83, 0x37,
	0xaf, 0x8f, 0xda, 0x9d, 0x35, 0x07, 0xfe, 0x07, 0xaa, 0xc7, 0xed, 0xce, 0x8b, 0xfd, 0x78, 0xef,
	0x78, 0xcd, 0xdd, 0xad, 0x7e, 0xbe, 0x40, 0xce, 0xcf, 0x0b, 0xe4, 0x44, 0x07, 0x97, 0x37, 0xbe,
	0x7b, 0x75, 0xe3, 0xbb, 0x3f, 0x6e, 0x7c, 0xf7, 0xfc, 0xd6, 0x77, 0xae, 0x6e, 0x7d, 0xe7, 0xdb,
	0xad, 0xef, 0xbc, 0x7f, 0x74, 0x27, 0xa9, 0xd9, 0x9b, 0xa5, 0x52, 0x11, 0xc5, 0x45, 0x1a, 0x7e,
	0x2a, 0x9f, 0xaf, 0xce, 0xae, 0xb7, 0xa2, 0x2f, 0xfd, 0xf4, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1e, 0x4c, 0xcb, 0x97, 0xde, 0x03, 0x00, 0x00,
}

func (m *CallSourceMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallSourceMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallSourceMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintStaker(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintStaker(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Call) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Call) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Call) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintStaker(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.SourceMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Type != 0 {
		i = encodeVarintStaker(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStaker(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nominee) > 0 {
		i -= len(m.Nominee)
		copy(dAtA[i:], m.Nominee)
		i = encodeVarintStaker(dAtA, i, uint64(len(m.Nominee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintStaker(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStaker(dAtA []byte, offset int, v uint64) int {
	offset -= sovStaker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CallSourceMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovStaker(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovStaker(uint64(l))
	}
	return n
}

func (m *Call) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovStaker(uint64(l))
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovStaker(uint64(l))
	}
	l = len(m.Nominee)
	if l > 0 {
		n += 1 + l + sovStaker(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStaker(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovStaker(uint64(m.Type))
	}
	l = m.SourceMeta.Size()
	n += 1 + l + sovStaker(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovStaker(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovStaker(uint64(l))
	return n
}

func sovStaker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStaker(x uint64) (n int) {
	return sovStaker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CallSourceMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallSourceMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallSourceMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Call) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Call: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Call: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nominee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nominee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Call_CallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SourceMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStaker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStaker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStaker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStaker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStaker = fmt.Errorf("proto: unexpected end of group")
)
