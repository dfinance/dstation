// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dfinance/oracle/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	github_com_dfinance_dstation_pkg_types "github.com/dfinance/dstation/pkg/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetOracle defines a SDK message to create/update an Oracle.
type MsgSetOracle struct {
	// Nominee account address
	Nominee string `protobuf:"bytes,1,opt,name=nominee,proto3" json:"nominee,omitempty" yaml:"nominee"`
	// Target Oracle to create/update
	Oracle Oracle `protobuf:"bytes,2,opt,name=oracle,proto3" json:"oracle" yaml:"oracle"`
}

func (m *MsgSetOracle) Reset()         { *m = MsgSetOracle{} }
func (m *MsgSetOracle) String() string { return proto.CompactTextString(m) }
func (*MsgSetOracle) ProtoMessage()    {}
func (*MsgSetOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca85ae2167d6b8e9, []int{0}
}
func (m *MsgSetOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOracle.Merge(m, src)
}
func (m *MsgSetOracle) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOracle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOracle proto.InternalMessageInfo

// MsgSetAsset defines a SDK message to create/update an Asset.
type MsgSetAsset struct {
	// Nominee account address
	Nominee string `protobuf:"bytes,1,opt,name=nominee,proto3" json:"nominee,omitempty" yaml:"nominee"`
	// Target Asset to create/update
	Asset Asset `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset" yaml:"asset"`
}

func (m *MsgSetAsset) Reset()         { *m = MsgSetAsset{} }
func (m *MsgSetAsset) String() string { return proto.CompactTextString(m) }
func (*MsgSetAsset) ProtoMessage()    {}
func (*MsgSetAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca85ae2167d6b8e9, []int{1}
}
func (m *MsgSetAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAsset.Merge(m, src)
}
func (m *MsgSetAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAsset proto.InternalMessageInfo

// MsgPostPrice defines a SDK message to post a raw price from source (Oracle).
type MsgPostPrice struct {
	// Asset code (for ex.: btc_usdt)
	AssetCode github_com_dfinance_dstation_pkg_types.AssetCode `protobuf:"bytes,1,opt,name=asset_code,json=assetCode,proto3,customtype=github.com/dfinance/dstation/pkg/types.AssetCode" json:"asset_code" yaml:"asset_code"`
	// Price source (Oracle address)
	OracleAddress string `protobuf:"bytes,2,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty" yaml:"oracle_address"`
	// The lowest seller price
	AskPrice github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=ask_price,json=askPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ask_price" yaml:"ask_price"`
	// The highest buyer price
	BidPrice github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=bid_price,json=bidPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bid_price" yaml:"bid_price"`
	// Price timestamp
	ReceivedAt time.Time `protobuf:"bytes,5,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at" yaml:"received_at"`
}

func (m *MsgPostPrice) Reset()         { *m = MsgPostPrice{} }
func (m *MsgPostPrice) String() string { return proto.CompactTextString(m) }
func (*MsgPostPrice) ProtoMessage()    {}
func (*MsgPostPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca85ae2167d6b8e9, []int{2}
}
func (m *MsgPostPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostPrice.Merge(m, src)
}
func (m *MsgPostPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostPrice proto.InternalMessageInfo

type MsgSetOracleResponse struct {
}

func (m *MsgSetOracleResponse) Reset()         { *m = MsgSetOracleResponse{} }
func (m *MsgSetOracleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetOracleResponse) ProtoMessage()    {}
func (*MsgSetOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca85ae2167d6b8e9, []int{3}
}
func (m *MsgSetOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOracleResponse.Merge(m, src)
}
func (m *MsgSetOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOracleResponse proto.InternalMessageInfo

type MsgSetAssetResponse struct {
}

func (m *MsgSetAssetResponse) Reset()         { *m = MsgSetAssetResponse{} }
func (m *MsgSetAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetAssetResponse) ProtoMessage()    {}
func (*MsgSetAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca85ae2167d6b8e9, []int{4}
}
func (m *MsgSetAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAssetResponse.Merge(m, src)
}
func (m *MsgSetAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAssetResponse proto.InternalMessageInfo

type MsgPostPriceResponse struct {
}

func (m *MsgPostPriceResponse) Reset()         { *m = MsgPostPriceResponse{} }
func (m *MsgPostPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostPriceResponse) ProtoMessage()    {}
func (*MsgPostPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca85ae2167d6b8e9, []int{5}
}
func (m *MsgPostPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostPriceResponse.Merge(m, src)
}
func (m *MsgPostPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostPriceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSetOracle)(nil), "dfinance.oracle.v1beta1.MsgSetOracle")
	proto.RegisterType((*MsgSetAsset)(nil), "dfinance.oracle.v1beta1.MsgSetAsset")
	proto.RegisterType((*MsgPostPrice)(nil), "dfinance.oracle.v1beta1.MsgPostPrice")
	proto.RegisterType((*MsgSetOracleResponse)(nil), "dfinance.oracle.v1beta1.MsgSetOracleResponse")
	proto.RegisterType((*MsgSetAssetResponse)(nil), "dfinance.oracle.v1beta1.MsgSetAssetResponse")
	proto.RegisterType((*MsgPostPriceResponse)(nil), "dfinance.oracle.v1beta1.MsgPostPriceResponse")
}

func init() { proto.RegisterFile("dfinance/oracle/tx.proto", fileDescriptor_ca85ae2167d6b8e9) }

var fileDescriptor_ca85ae2167d6b8e9 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0x6e, 0x41, 0x70, 0x3b, 0xfc, 0x88, 0x56, 0xd0, 0x75, 0x63, 0x3a, 0x64, 0xa2, 0x86, 0x44,
	0x68, 0x05, 0x6f, 0x9c, 0xa4, 0xc6, 0x83, 0x26, 0x28, 0xa9, 0x9e, 0x34, 0xb1, 0x99, 0xb6, 0x43,
	0x6d, 0x76, 0xdb, 0x69, 0x76, 0x06, 0x02, 0xff, 0x81, 0x47, 0xbc, 0x78, 0xe6, 0xee, 0x3f, 0xc2,
	0x91, 0xa3, 0xf1, 0x50, 0x0d, 0x7b, 0xd0, 0xf3, 0xfe, 0x05, 0x66, 0xe7, 0x47, 0x69, 0x34, 0xbb,
	0x62, 0x3c, 0xed, 0xce, 0xfb, 0xbe, 0xf7, 0xbd, 0x6f, 0xe6, 0xbd, 0x57, 0xd0, 0x4e, 0xf6, 0xb2,
	0x02, 0x17, 0x31, 0xf1, 0x68, 0x1f, 0xc7, 0x3d, 0xe2, 0xf1, 0x43, 0xb7, 0xec, 0x53, 0x4e, 0xed,
	0x5b, 0x1a, 0x71, 0x25, 0xe2, 0x1e, 0x6c, 0x44, 0x84, 0xe3, 0x8d, 0xce, 0x52, 0x4a, 0x53, 0x2a,
	0x38, 0xde, 0xe8, 0x9f, 0xa4, 0x77, 0xee, 0xa4, 0x94, 0xa6, 0x3d, 0xe2, 0xe1, 0x32, 0xf3, 0x70,
	0x51, 0x50, 0x8e, 0x79, 0x46, 0x0b, 0xa6, 0x50, 0xa8, 0x50, 0x71, 0x8a, 0xf6, 0xf7, 0x3c, 0x9e,
	0xe5, 0x84, 0x71, 0x9c, 0x97, 0x3a, 0xfd, 0x77, 0x1f, 0xaa, 0xa8, 0x40, 0xd1, 0x27, 0x13, 0xcc,
	0xef, 0xb0, 0xf4, 0x15, 0xe1, 0x2f, 0x45, 0xd8, 0x5e, 0x03, 0x57, 0x0b, 0x9a, 0x67, 0x05, 0x21,
	0x6d, 0x73, 0xc5, 0x5c, 0xb5, 0x7c, 0x7b, 0x58, 0xc1, 0xc5, 0x23, 0x9c, 0xf7, 0xb6, 0x90, 0x02,
	0x50, 0xa0, 0x29, 0xf6, 0x0b, 0x30, 0x2b, 0xe5, 0xda, 0x53, 0x2b, 0xe6, 0xea, 0xdc, 0x26, 0x74,
	0xc7, 0xdc, 0xcd, 0x95, 0xf2, 0xfe, 0xf2, 0x69, 0x05, 0x8d, 0x61, 0x05, 0x17, 0xa4, 0xa2, 0x24,
	0xa1, 0x40, 0xa9, 0x6c, 0xb5, 0x3e, 0x9c, 0x40, 0xe3, 0xe7, 0x09, 0x34, 0xd0, 0x47, 0x13, 0xcc,
	0x49, 0x63, 0xdb, 0x8c, 0x11, 0xfe, 0x8f, 0xbe, 0x9e, 0x83, 0x19, 0x3c, 0x4a, 0x53, 0xb6, 0x9c,
	0xb1, 0xb6, 0x84, 0xb8, 0xbf, 0xa4, 0x5c, 0xcd, 0x4b, 0x3d, 0x91, 0x8a, 0x02, 0x29, 0xd1, 0xf0,
	0xf4, 0x63, 0x5a, 0x3c, 0xd6, 0x2e, 0x65, 0x7c, 0xb7, 0x9f, 0xc5, 0xc4, 0xee, 0x01, 0x20, 0x38,
	0x61, 0x4c, 0x13, 0xed, 0x6b, 0x67, 0xa4, 0xf5, 0xb5, 0x82, 0x0f, 0xd3, 0x8c, 0xbf, 0xdf, 0x8f,
	0xdc, 0x98, 0xe6, 0x5e, 0xdd, 0x82, 0x84, 0xc9, 0xee, 0x79, 0x65, 0x37, 0xf5, 0xf8, 0x51, 0x49,
	0x98, 0x74, 0xf0, 0x84, 0x26, 0x64, 0x58, 0xc1, 0xeb, 0x8d, 0xfa, 0x42, 0x13, 0x05, 0x16, 0xd6,
	0xb8, 0xfd, 0x18, 0x2c, 0x4a, 0xf7, 0x21, 0x4e, 0x92, 0x3e, 0x61, 0x4c, 0xdc, 0xce, 0xf2, 0x6f,
	0x0f, 0x2b, 0xb8, 0xdc, 0x7c, 0x4f, 0x8d, 0xa3, 0x60, 0x41, 0x06, 0xb6, 0xe5, 0xd9, 0x0e, 0x81,
	0x85, 0x59, 0x37, 0x2c, 0x47, 0xe6, 0xdb, 0xd3, 0x22, 0xd9, 0x57, 0x76, 0xef, 0x37, 0xec, 0xc6,
	0x94, 0xe5, 0x94, 0xa9, 0x9f, 0x75, 0x96, 0x74, 0x95, 0xd5, 0x67, 0x05, 0x1f, 0x56, 0xf0, 0x9a,
	0x36, 0xa9, 0x84, 0x50, 0xd0, 0xc2, 0xac, 0x2b, 0x1f, 0x24, 0x04, 0x56, 0x94, 0x25, 0xaa, 0xc0,
	0x95, 0xff, 0x2b, 0x50, 0x0b, 0xa1, 0xa0, 0x15, 0x65, 0x89, 0x2c, 0xf0, 0x16, 0xcc, 0xf5, 0x49,
	0x4c, 0xb2, 0x03, 0x92, 0x84, 0x98, 0xb7, 0x67, 0x44, 0x7b, 0x3b, 0xae, 0x5c, 0x02, 0x57, 0x2f,
	0x81, 0xfb, 0x5a, 0x2f, 0x81, 0xef, 0xa8, 0xd6, 0xda, 0x52, 0xb4, 0x91, 0x8c, 0x8e, 0xbf, 0x41,
	0x33, 0x00, 0x3a, 0xb2, 0xdd, 0xec, 0xf4, 0x4d, 0xb0, 0xd4, 0xdc, 0x8a, 0x80, 0xb0, 0x92, 0x16,
	0x8c, 0xa0, 0x65, 0x70, 0xa3, 0x31, 0x94, 0x75, 0x58, 0xd2, 0xeb, 0xb9, 0xd0, 0xf1, 0xcd, 0xcf,
	0x53, 0x60, 0x7a, 0x87, 0xa5, 0x36, 0x06, 0xd6, 0xc5, 0x86, 0xdd, 0x1b, 0x3b, 0x8c, 0xcd, 0x92,
	0x9d, 0xf5, 0x4b, 0xd1, 0x74, 0x29, 0xfb, 0x1d, 0x68, 0xd5, 0xbb, 0x72, 0xf7, 0x2f, 0xa9, 0x82,
	0xd5, 0x59, 0xbb, 0x0c, 0xab, 0xd6, 0xc7, 0xc0, 0xba, 0x98, 0xfb, 0x89, 0x57, 0xa8, 0x69, 0x93,
	0xaf, 0xf0, 0xc7, 0x6b, 0xf9, 0x4f, 0x4f, 0xcf, 0x1d, 0xf3, 0xec, 0xdc, 0x31, 0xbf, 0x9f, 0x3b,
	0xe6, 0xf1, 0xc0, 0x31, 0xce, 0x06, 0x8e, 0xf1, 0x65, 0xe0, 0x18, 0x6f, 0x1e, 0x4c, 0xdc, 0xa5,
	0xc3, 0xfa, 0x0b, 0x3b, 0x1a, 0xa2, 0x68, 0x56, 0x4c, 0xc1, 0xa3, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xf9, 0x56, 0x3e, 0x54, 0x81, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SetOracle creates/updates an Oracle source (nominee authorized).
	SetOracle(ctx context.Context, in *MsgSetOracle, opts ...grpc.CallOption) (*MsgSetOracleResponse, error)
	// SetAsset creates/updates an Asset (nominee authorized).
	SetAsset(ctx context.Context, in *MsgSetAsset, opts ...grpc.CallOption) (*MsgSetAssetResponse, error)
	// PostPrice posts a raw price from a source (Oracle)
	PostPrice(ctx context.Context, in *MsgPostPrice, opts ...grpc.CallOption) (*MsgPostPriceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetOracle(ctx context.Context, in *MsgSetOracle, opts ...grpc.CallOption) (*MsgSetOracleResponse, error) {
	out := new(MsgSetOracleResponse)
	err := c.cc.Invoke(ctx, "/dfinance.oracle.v1beta1.Msg/SetOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetAsset(ctx context.Context, in *MsgSetAsset, opts ...grpc.CallOption) (*MsgSetAssetResponse, error) {
	out := new(MsgSetAssetResponse)
	err := c.cc.Invoke(ctx, "/dfinance.oracle.v1beta1.Msg/SetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PostPrice(ctx context.Context, in *MsgPostPrice, opts ...grpc.CallOption) (*MsgPostPriceResponse, error) {
	out := new(MsgPostPriceResponse)
	err := c.cc.Invoke(ctx, "/dfinance.oracle.v1beta1.Msg/PostPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SetOracle creates/updates an Oracle source (nominee authorized).
	SetOracle(context.Context, *MsgSetOracle) (*MsgSetOracleResponse, error)
	// SetAsset creates/updates an Asset (nominee authorized).
	SetAsset(context.Context, *MsgSetAsset) (*MsgSetAssetResponse, error)
	// PostPrice posts a raw price from a source (Oracle)
	PostPrice(context.Context, *MsgPostPrice) (*MsgPostPriceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetOracle(ctx context.Context, req *MsgSetOracle) (*MsgSetOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOracle not implemented")
}
func (*UnimplementedMsgServer) SetAsset(ctx context.Context, req *MsgSetAsset) (*MsgSetAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAsset not implemented")
}
func (*UnimplementedMsgServer) PostPrice(ctx context.Context, req *MsgPostPrice) (*MsgPostPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPrice not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetOracle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.oracle.v1beta1.Msg/SetOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetOracle(ctx, req.(*MsgSetOracle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.oracle.v1beta1.Msg/SetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetAsset(ctx, req.(*MsgSetAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PostPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.oracle.v1beta1.Msg/PostPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostPrice(ctx, req.(*MsgPostPrice))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfinance.oracle.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetOracle",
			Handler:    _Msg_SetOracle_Handler,
		},
		{
			MethodName: "SetAsset",
			Handler:    _Msg_SetAsset_Handler,
		},
		{
			MethodName: "PostPrice",
			Handler:    _Msg_PostPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfinance/oracle/tx.proto",
}

func (m *MsgSetOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Oracle.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Nominee) > 0 {
		i -= len(m.Nominee)
		copy(dAtA[i:], m.Nominee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Nominee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Nominee) > 0 {
		i -= len(m.Nominee)
		copy(dAtA[i:], m.Nominee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Nominee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReceivedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTx(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	{
		size := m.BidPrice.Size()
		i -= size
		if _, err := m.BidPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AskPrice.Size()
		i -= size
		if _, err := m.AskPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.AssetCode.Size()
		i -= size
		if _, err := m.AssetCode.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSetOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPostPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nominee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Oracle.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nominee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Asset.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPostPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AssetCode.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AskPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.BidPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPostPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nominee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nominee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Oracle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nominee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nominee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetCode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AskPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
