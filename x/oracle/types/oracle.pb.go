// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dfinance/oracle/oracle.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	github_com_dfinance_dstation_pkg_types "github.com/dfinance/dstation/pkg/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Asset represents an Oracle asset.
type Asset struct {
	// Asset code (for ex.: btc_usdt)
	AssetCode github_com_dfinance_dstation_pkg_types.AssetCode `protobuf:"bytes,1,opt,name=asset_code,json=assetCode,proto3,customtype=github.com/dfinance/dstation/pkg/types.AssetCode" json:"asset_code" yaml:"asset_code"`
	// List of registered RawPrice sources (Oracle addresses)
	// If none - asset is essentially disabled
	Oracles []string `protobuf:"bytes,2,rep,name=oracles,proto3" json:"oracles,omitempty" yaml:"oracles"`
	// Number of decimals for Asset's CurrentPrice values
	Decimals uint32 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty" yaml:"decimals"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f535edf14be0f7, []int{0}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetOracles() []string {
	if m != nil {
		return m.Oracles
	}
	return nil
}

func (m *Asset) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

// Oracle contains Oracle source info.
type Oracle struct {
	// Oracle account address
	AccAddress string `protobuf:"bytes,1,opt,name=acc_address,json=accAddress,proto3" json:"acc_address,omitempty" yaml:"acc_address"`
	// Optional Oracle description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	// Maximum number of bytes for PostPrice values
	PriceMaxBytes uint32 `protobuf:"varint,3,opt,name=price_max_bytes,json=priceMaxBytes,proto3" json:"price_max_bytes,omitempty" yaml:"price_max_bytes"`
	// Number of decimals for PostPrice values
	PriceDecimals uint32 `protobuf:"varint,4,opt,name=price_decimals,json=priceDecimals,proto3" json:"price_decimals,omitempty" yaml:"price_decimals"`
}

func (m *Oracle) Reset()         { *m = Oracle{} }
func (m *Oracle) String() string { return proto.CompactTextString(m) }
func (*Oracle) ProtoMessage()    {}
func (*Oracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f535edf14be0f7, []int{1}
}
func (m *Oracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Oracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Oracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Oracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Oracle.Merge(m, src)
}
func (m *Oracle) XXX_Size() int {
	return m.Size()
}
func (m *Oracle) XXX_DiscardUnknown() {
	xxx_messageInfo_Oracle.DiscardUnknown(m)
}

var xxx_messageInfo_Oracle proto.InternalMessageInfo

func (m *Oracle) GetAccAddress() string {
	if m != nil {
		return m.AccAddress
	}
	return ""
}

func (m *Oracle) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Oracle) GetPriceMaxBytes() uint32 {
	if m != nil {
		return m.PriceMaxBytes
	}
	return 0
}

func (m *Oracle) GetPriceDecimals() uint32 {
	if m != nil {
		return m.PriceDecimals
	}
	return 0
}

// CurrentPrice contains meta of the current price for a particular asset (aggregated from multiple sources).
type CurrentPrice struct {
	// Asset code (for ex.: btc_usdt)
	AssetCode github_com_dfinance_dstation_pkg_types.AssetCode `protobuf:"bytes,1,opt,name=asset_code,json=assetCode,proto3,customtype=github.com/dfinance/dstation/pkg/types.AssetCode" json:"asset_code" yaml:"asset_code"`
	// The latest lowest seller price
	AskPrice github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=ask_price,json=askPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ask_price" yaml:"ask_price"`
	// The latest highest buyer price
	BidPrice github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=bid_price,json=bidPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bid_price" yaml:"bid_price"`
	// The latest price update timestamp
	ReceivedAt time.Time `protobuf:"bytes,4,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at" yaml:"received_at"`
	// CurrentPrice is reversed flag: price is not received from Oracle sources, exchange rates were reversed programmatically
	IsReversed bool `protobuf:"varint,5,opt,name=is_reversed,json=isReversed,proto3" json:"is_reversed,omitempty" yaml:"is_reversed"`
}

func (m *CurrentPrice) Reset()         { *m = CurrentPrice{} }
func (m *CurrentPrice) String() string { return proto.CompactTextString(m) }
func (*CurrentPrice) ProtoMessage()    {}
func (*CurrentPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f535edf14be0f7, []int{2}
}
func (m *CurrentPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentPrice.Merge(m, src)
}
func (m *CurrentPrice) XXX_Size() int {
	return m.Size()
}
func (m *CurrentPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentPrice.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentPrice proto.InternalMessageInfo

func (m *CurrentPrice) GetReceivedAt() time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return time.Time{}
}

func (m *CurrentPrice) GetIsReversed() bool {
	if m != nil {
		return m.IsReversed
	}
	return false
}

// RawPrice is used to store normalized asset prices per Oracle.
type RawPrice struct {
	AskPrice   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=ask_price,json=askPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ask_price" yaml:"ask_price"`
	BidPrice   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=bid_price,json=bidPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bid_price" yaml:"bid_price"`
	ReceivedAt time.Time                              `protobuf:"bytes,3,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at" yaml:"received_at"`
}

func (m *RawPrice) Reset()         { *m = RawPrice{} }
func (m *RawPrice) String() string { return proto.CompactTextString(m) }
func (*RawPrice) ProtoMessage()    {}
func (*RawPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f535edf14be0f7, []int{3}
}
func (m *RawPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawPrice.Merge(m, src)
}
func (m *RawPrice) XXX_Size() int {
	return m.Size()
}
func (m *RawPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_RawPrice.DiscardUnknown(m)
}

var xxx_messageInfo_RawPrice proto.InternalMessageInfo

func (m *RawPrice) GetReceivedAt() time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*Asset)(nil), "dfinance.oracle.v1beta1.Asset")
	proto.RegisterType((*Oracle)(nil), "dfinance.oracle.v1beta1.Oracle")
	proto.RegisterType((*CurrentPrice)(nil), "dfinance.oracle.v1beta1.CurrentPrice")
	proto.RegisterType((*RawPrice)(nil), "dfinance.oracle.v1beta1.RawPrice")
}

func init() { proto.RegisterFile("dfinance/oracle/oracle.proto", fileDescriptor_59f535edf14be0f7) }

var fileDescriptor_59f535edf14be0f7 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0x5a, 0x36, 0x5a, 0x97, 0x6d, 0x10, 0x60, 0x74, 0x15, 0x4a, 0x2a, 0x1f, 0x50, 0x25,
	0x20, 0x61, 0x70, 0x00, 0x71, 0x62, 0x19, 0x1c, 0x38, 0x4c, 0x20, 0x8b, 0x13, 0x1c, 0x22, 0xc7,
	0xf6, 0x82, 0xd5, 0xa6, 0x8e, 0x62, 0x6f, 0x6c, 0x47, 0xfe, 0xc1, 0xfe, 0x06, 0xff, 0x64, 0xc7,
	0x1d, 0x76, 0x40, 0x1c, 0x02, 0x5a, 0xff, 0x41, 0x7e, 0x01, 0x4a, 0x1c, 0xb7, 0xd1, 0x0e, 0x5c,
	0x60, 0x9c, 0xe2, 0xe7, 0xef, 0x7b, 0xef, 0x7b, 0xef, 0xeb, 0x73, 0xc1, 0x7d, 0xba, 0xcf, 0x67,
	0x78, 0x46, 0x98, 0x2f, 0x32, 0x4c, 0xa6, 0xe6, 0xe3, 0xa5, 0x99, 0x50, 0xc2, 0xbe, 0x67, 0x50,
	0xaf, 0xbe, 0x3e, 0xdc, 0x8e, 0x98, 0xc2, 0xdb, 0xc3, 0x3b, 0xb1, 0x88, 0x45, 0xc5, 0xf1, 0xcb,
	0x93, 0xa6, 0x0f, 0xdd, 0x58, 0x88, 0x78, 0xca, 0xfc, 0x2a, 0x8a, 0x0e, 0xf6, 0x7d, 0xc5, 0x13,
	0x26, 0x15, 0x4e, 0xd2, 0x9a, 0xb0, 0x45, 0x84, 0x4c, 0x84, 0x0c, 0x75, 0xa6, 0x0e, 0x34, 0x04,
	0xcf, 0x2d, 0xb0, 0xb2, 0x23, 0x25, 0x53, 0xf6, 0x14, 0x00, 0x5c, 0x1e, 0x42, 0x22, 0x28, 0x1b,
	0x58, 0x23, 0x6b, 0xdc, 0x0b, 0xf6, 0x4e, 0x73, 0xb7, 0xf5, 0x23, 0x77, 0x9f, 0xc4, 0x5c, 0x7d,
	0x3e, 0x88, 0x3c, 0x22, 0x12, 0x7f, 0xd1, 0x39, 0x95, 0x0a, 0x2b, 0x2e, 0x66, 0x7e, 0x3a, 0x89,
	0x7d, 0x75, 0x9c, 0x32, 0xe9, 0x55, 0x95, 0x76, 0x05, 0x65, 0x45, 0xee, 0xde, 0x3a, 0xc6, 0xc9,
	0xf4, 0x25, 0x5c, 0xd6, 0x84, 0xa8, 0x87, 0x0d, 0x6e, 0x3f, 0x02, 0xd7, 0xf5, 0x6c, 0x72, 0xd0,
	0x1e, 0x75, 0xc6, 0xbd, 0xc0, 0x2e, 0x72, 0x77, 0x5d, 0xa7, 0xd4, 0x00, 0x44, 0x86, 0x62, 0xfb,
	0xa0, 0x4b, 0x19, 0xe1, 0x09, 0x9e, 0xca, 0x41, 0x67, 0x64, 0x8d, 0xd7, 0x82, 0xdb, 0x45, 0xee,
	0x6e, 0x68, 0xba, 0x41, 0x20, 0x5a, 0x90, 0xe0, 0xd7, 0x36, 0x58, 0x7d, 0x57, 0x25, 0xdb, 0xcf,
	0x41, 0x1f, 0x13, 0x12, 0x62, 0x4a, 0x33, 0x26, 0x65, 0x3d, 0xd8, 0x66, 0x91, 0xbb, 0x76, 0xdd,
	0xe0, 0x12, 0x84, 0x08, 0x60, 0x42, 0x76, 0x74, 0x60, 0xbf, 0x00, 0x7d, 0xca, 0x24, 0xc9, 0x78,
	0x5a, 0x4e, 0x39, 0x68, 0x5f, 0x4e, 0x6c, 0x80, 0x10, 0x35, 0xa9, 0x76, 0x00, 0x36, 0xd2, 0x8c,
	0x13, 0x16, 0x26, 0xf8, 0x28, 0x8c, 0x8e, 0x15, 0x33, 0x5d, 0x0f, 0x8b, 0xdc, 0xdd, 0xd4, 0xd9,
	0x97, 0x08, 0x10, 0xad, 0x55, 0x37, 0x7b, 0xf8, 0x28, 0x28, 0x63, 0xfb, 0x15, 0x58, 0xd7, 0x94,
	0xc5, 0xe0, 0xd7, 0xaa, 0x12, 0x5b, 0x45, 0xee, 0xde, 0x6d, 0x96, 0x58, 0x8e, 0xaf, 0x2b, 0xbc,
	0x36, 0xf1, 0x79, 0x07, 0xdc, 0xd8, 0x3d, 0xc8, 0x32, 0x36, 0x53, 0xef, 0x4b, 0xe0, 0x3f, 0xff,
	0xc2, 0x21, 0xe8, 0x61, 0x39, 0x09, 0xab, 0x9e, 0x6a, 0xf3, 0x82, 0x5a, 0xec, 0x41, 0x43, 0x4c,
	0x6f, 0x63, 0xfd, 0x79, 0x2c, 0xe9, 0xa4, 0x16, 0x7a, 0x3b, 0x53, 0x45, 0xee, 0xde, 0x34, 0x12,
	0x75, 0x21, 0x88, 0xba, 0x58, 0x4e, 0xf4, 0x38, 0x21, 0xe8, 0x45, 0x9c, 0xd6, 0x02, 0x9d, 0xbf,
	0x13, 0x58, 0x14, 0x82, 0xa8, 0x1b, 0x71, 0xaa, 0x05, 0x3e, 0x81, 0x7e, 0xc6, 0x08, 0xe3, 0x87,
	0x8c, 0x86, 0x58, 0x55, 0xfe, 0xf7, 0x9f, 0x0e, 0x3d, 0xfd, 0xda, 0x3c, 0xf3, 0xda, 0xbc, 0x0f,
	0xe6, 0xb5, 0x05, 0x4e, 0x29, 0xbf, 0x5c, 0x90, 0x46, 0x32, 0x3c, 0xf9, 0xe9, 0x5a, 0x08, 0x98,
	0x9b, 0x1d, 0x55, 0xae, 0x25, 0x97, 0x61, 0xc6, 0x0e, 0x59, 0x26, 0x19, 0x1d, 0xac, 0x8c, 0xac,
	0x71, 0xb7, 0xb9, 0x5d, 0x0d, 0x10, 0x22, 0xc0, 0x25, 0x32, 0xc1, 0xb7, 0x36, 0xe8, 0x22, 0xfc,
	0x65, 0xe1, 0xc1, 0xd2, 0x64, 0xeb, 0xaa, 0x4d, 0x6e, 0x5f, 0xbd, 0xc9, 0x9d, 0x7f, 0x69, 0x72,
	0xf0, 0xe6, 0xf4, 0xc2, 0xb1, 0xce, 0x2e, 0x1c, 0xeb, 0xd7, 0x85, 0x63, 0x9d, 0xcc, 0x9d, 0xd6,
	0xd9, 0xdc, 0x69, 0x7d, 0x9f, 0x3b, 0xad, 0x8f, 0x0f, 0xff, 0xb8, 0xef, 0x47, 0xe6, 0x6f, 0xb9,
	0x9a, 0x22, 0x5a, 0xad, 0xda, 0x78, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x87, 0xbb, 0x28, 0x80,
	0xb6, 0x05, 0x00, 0x00,
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimals != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Oracles[iNdEx])
			copy(dAtA[i:], m.Oracles[iNdEx])
			i = encodeVarintOracle(dAtA, i, uint64(len(m.Oracles[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.AssetCode.Size()
		i -= size
		if _, err := m.AssetCode.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Oracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Oracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Oracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PriceDecimals != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.PriceDecimals))
		i--
		dAtA[i] = 0x20
	}
	if m.PriceMaxBytes != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.PriceMaxBytes))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccAddress) > 0 {
		i -= len(m.AccAddress)
		copy(dAtA[i:], m.AccAddress)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.AccAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CurrentPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsReversed {
		i--
		if m.IsReversed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReceivedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintOracle(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	{
		size := m.BidPrice.Size()
		i -= size
		if _, err := m.BidPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.AskPrice.Size()
		i -= size
		if _, err := m.AskPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.AssetCode.Size()
		i -= size
		if _, err := m.AssetCode.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RawPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RawPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReceivedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintOracle(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	{
		size := m.BidPrice.Size()
		i -= size
		if _, err := m.BidPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.AskPrice.Size()
		i -= size
		if _, err := m.AskPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AssetCode.Size()
	n += 1 + l + sovOracle(uint64(l))
	if len(m.Oracles) > 0 {
		for _, s := range m.Oracles {
			l = len(s)
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if m.Decimals != 0 {
		n += 1 + sovOracle(uint64(m.Decimals))
	}
	return n
}

func (m *Oracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccAddress)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.PriceMaxBytes != 0 {
		n += 1 + sovOracle(uint64(m.PriceMaxBytes))
	}
	if m.PriceDecimals != 0 {
		n += 1 + sovOracle(uint64(m.PriceDecimals))
	}
	return n
}

func (m *CurrentPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AssetCode.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.AskPrice.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.BidPrice.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt)
	n += 1 + l + sovOracle(uint64(l))
	if m.IsReversed {
		n += 2
	}
	return n
}

func (m *RawPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AskPrice.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.BidPrice.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt)
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetCode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Oracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Oracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Oracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceMaxBytes", wireType)
			}
			m.PriceMaxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceMaxBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDecimals", wireType)
			}
			m.PriceDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceDecimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetCode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AskPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReversed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReversed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AskPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
