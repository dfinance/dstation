// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dfinance/dvm/vm.proto

package dvm

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LcsType int32

const (
	LcsType_LcsBool    LcsType = 0
	LcsType_LcsU64     LcsType = 1
	LcsType_LcsVector  LcsType = 2
	LcsType_LcsAddress LcsType = 3
	LcsType_LcsU8      LcsType = 4
	LcsType_LcsU128    LcsType = 5
	LcsType_LcsSigner  LcsType = 6
	LcsType_LcsStruct  LcsType = 7
)

var LcsType_name = map[int32]string{
	0: "LcsBool",
	1: "LcsU64",
	2: "LcsVector",
	3: "LcsAddress",
	4: "LcsU8",
	5: "LcsU128",
	6: "LcsSigner",
	7: "LcsStruct",
}

var LcsType_value = map[string]int32{
	"LcsBool":    0,
	"LcsU64":     1,
	"LcsVector":  2,
	"LcsAddress": 3,
	"LcsU8":      4,
	"LcsU128":    5,
	"LcsSigner":  6,
	"LcsStruct":  7,
}

func (x LcsType) String() string {
	return proto.EnumName(LcsType_name, int32(x))
}

func (LcsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{0}
}

// Write set operation type.
type VmWriteOp int32

const (
	VmWriteOp_Value    VmWriteOp = 0
	VmWriteOp_Deletion VmWriteOp = 1
)

var VmWriteOp_name = map[int32]string{
	0: "Value",
	1: "Deletion",
}

var VmWriteOp_value = map[string]int32{
	"Value":    0,
	"Deletion": 1,
}

func (x VmWriteOp) String() string {
	return proto.EnumName(VmWriteOp_name, int32(x))
}

func (VmWriteOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{1}
}

// An `AbortLocation` specifies where a Move program `abort` occurred, either in a function in
// a module, or in a script.
type AbortLocation struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Module  string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
}

func (m *AbortLocation) Reset()         { *m = AbortLocation{} }
func (m *AbortLocation) String() string { return proto.CompactTextString(m) }
func (*AbortLocation) ProtoMessage()    {}
func (*AbortLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{0}
}
func (m *AbortLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AbortLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AbortLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AbortLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortLocation.Merge(m, src)
}
func (m *AbortLocation) XXX_Size() int {
	return m.Size()
}
func (m *AbortLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortLocation.DiscardUnknown(m)
}

var xxx_messageInfo_AbortLocation proto.InternalMessageInfo

func (m *AbortLocation) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AbortLocation) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

// Function location.
type FunctionLoc struct {
	Function   uint64 `protobuf:"varint,1,opt,name=function,proto3" json:"function,omitempty"`
	CodeOffset uint64 `protobuf:"varint,2,opt,name=code_offset,json=codeOffset,proto3" json:"code_offset,omitempty"`
}

func (m *FunctionLoc) Reset()         { *m = FunctionLoc{} }
func (m *FunctionLoc) String() string { return proto.CompactTextString(m) }
func (*FunctionLoc) ProtoMessage()    {}
func (*FunctionLoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{1}
}
func (m *FunctionLoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionLoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionLoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionLoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionLoc.Merge(m, src)
}
func (m *FunctionLoc) XXX_Size() int {
	return m.Size()
}
func (m *FunctionLoc) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionLoc.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionLoc proto.InternalMessageInfo

func (m *FunctionLoc) GetFunction() uint64 {
	if m != nil {
		return m.Function
	}
	return 0
}

func (m *FunctionLoc) GetCodeOffset() uint64 {
	if m != nil {
		return m.CodeOffset
	}
	return 0
}

// VmStatus `Error` case.
type MoveError struct {
	// Status code.
	StatusCode uint64 `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (m *MoveError) Reset()         { *m = MoveError{} }
func (m *MoveError) String() string { return proto.CompactTextString(m) }
func (*MoveError) ProtoMessage()    {}
func (*MoveError) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{2}
}
func (m *MoveError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveError.Merge(m, src)
}
func (m *MoveError) XXX_Size() int {
	return m.Size()
}
func (m *MoveError) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveError.DiscardUnknown(m)
}

var xxx_messageInfo_MoveError proto.InternalMessageInfo

func (m *MoveError) GetStatusCode() uint64 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

// VmStatus `MoveAbort` case.
type Abort struct {
	// Abort location. (optional). Null if abort occurred in the script.
	AbortLocation *AbortLocation `protobuf:"bytes,1,opt,name=abort_location,json=abortLocation,proto3" json:"abort_location,omitempty"`
	// Abort code.
	AbortCode uint64 `protobuf:"varint,2,opt,name=abort_code,json=abortCode,proto3" json:"abort_code,omitempty"`
}

func (m *Abort) Reset()         { *m = Abort{} }
func (m *Abort) String() string { return proto.CompactTextString(m) }
func (*Abort) ProtoMessage()    {}
func (*Abort) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{3}
}
func (m *Abort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Abort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Abort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Abort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Abort.Merge(m, src)
}
func (m *Abort) XXX_Size() int {
	return m.Size()
}
func (m *Abort) XXX_DiscardUnknown() {
	xxx_messageInfo_Abort.DiscardUnknown(m)
}

var xxx_messageInfo_Abort proto.InternalMessageInfo

func (m *Abort) GetAbortLocation() *AbortLocation {
	if m != nil {
		return m.AbortLocation
	}
	return nil
}

func (m *Abort) GetAbortCode() uint64 {
	if m != nil {
		return m.AbortCode
	}
	return 0
}

// VmStatus `ExecutionFailure` case.
type Failure struct {
	// Status code.
	StatusCode uint64 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// Abort location. (optional). Null if abort occurred in the script.
	AbortLocation *AbortLocation `protobuf:"bytes,2,opt,name=abort_location,json=abortLocation,proto3" json:"abort_location,omitempty"`
	// Function location.
	FunctionLoc *FunctionLoc `protobuf:"bytes,3,opt,name=function_loc,json=functionLoc,proto3" json:"function_loc,omitempty"`
}

func (m *Failure) Reset()         { *m = Failure{} }
func (m *Failure) String() string { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()    {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{4}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return m.Size()
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetStatusCode() uint64 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *Failure) GetAbortLocation() *AbortLocation {
	if m != nil {
		return m.AbortLocation
	}
	return nil
}

func (m *Failure) GetFunctionLoc() *FunctionLoc {
	if m != nil {
		return m.FunctionLoc
	}
	return nil
}

/// Message.
type Message struct {
	// Message with error details if needed.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{5}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// A `VMStatus` is represented as either
// - `Null` indicating successful execution.
// - `Error` indicating an error from the VM itself.
// - `MoveAbort` indicating an `abort` ocurred inside of a Move program
// - `ExecutionFailure` indicating an runtime error.
type VMStatus struct {
	// Types that are valid to be assigned to Error:
	//	*VMStatus_MoveError
	//	*VMStatus_Abort
	//	*VMStatus_ExecutionFailure
	Error isVMStatus_Error `protobuf_oneof:"error"`
	// Message with error details if needed (optional).
	Message *Message `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *VMStatus) Reset()         { *m = VMStatus{} }
func (m *VMStatus) String() string { return proto.CompactTextString(m) }
func (*VMStatus) ProtoMessage()    {}
func (*VMStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{6}
}
func (m *VMStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMStatus.Merge(m, src)
}
func (m *VMStatus) XXX_Size() int {
	return m.Size()
}
func (m *VMStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VMStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VMStatus proto.InternalMessageInfo

type isVMStatus_Error interface {
	isVMStatus_Error()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VMStatus_MoveError struct {
	MoveError *MoveError `protobuf:"bytes,1,opt,name=move_error,json=moveError,proto3,oneof" json:"move_error,omitempty"`
}
type VMStatus_Abort struct {
	Abort *Abort `protobuf:"bytes,2,opt,name=abort,proto3,oneof" json:"abort,omitempty"`
}
type VMStatus_ExecutionFailure struct {
	ExecutionFailure *Failure `protobuf:"bytes,3,opt,name=execution_failure,json=executionFailure,proto3,oneof" json:"execution_failure,omitempty"`
}

func (*VMStatus_MoveError) isVMStatus_Error()        {}
func (*VMStatus_Abort) isVMStatus_Error()            {}
func (*VMStatus_ExecutionFailure) isVMStatus_Error() {}

func (m *VMStatus) GetError() isVMStatus_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *VMStatus) GetMoveError() *MoveError {
	if x, ok := m.GetError().(*VMStatus_MoveError); ok {
		return x.MoveError
	}
	return nil
}

func (m *VMStatus) GetAbort() *Abort {
	if x, ok := m.GetError().(*VMStatus_Abort); ok {
		return x.Abort
	}
	return nil
}

func (m *VMStatus) GetExecutionFailure() *Failure {
	if x, ok := m.GetError().(*VMStatus_ExecutionFailure); ok {
		return x.ExecutionFailure
	}
	return nil
}

func (m *VMStatus) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VMStatus) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VMStatus_MoveError)(nil),
		(*VMStatus_Abort)(nil),
		(*VMStatus_ExecutionFailure)(nil),
	}
}

/// Full name of the structure.
type StructIdent struct {
	Address    []byte    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Module     string    `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Name       string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TypeParams []*LcsTag `protobuf:"bytes,4,rep,name=type_params,json=typeParams,proto3" json:"type_params,omitempty"`
}

func (m *StructIdent) Reset()         { *m = StructIdent{} }
func (m *StructIdent) String() string { return proto.CompactTextString(m) }
func (*StructIdent) ProtoMessage()    {}
func (*StructIdent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{7}
}
func (m *StructIdent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StructIdent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StructIdent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StructIdent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructIdent.Merge(m, src)
}
func (m *StructIdent) XXX_Size() int {
	return m.Size()
}
func (m *StructIdent) XXX_DiscardUnknown() {
	xxx_messageInfo_StructIdent.DiscardUnknown(m)
}

var xxx_messageInfo_StructIdent proto.InternalMessageInfo

func (m *StructIdent) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *StructIdent) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *StructIdent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StructIdent) GetTypeParams() []*LcsTag {
	if m != nil {
		return m.TypeParams
	}
	return nil
}

type LcsTag struct {
	TypeTag     LcsType      `protobuf:"varint,1,opt,name=type_tag,json=typeTag,proto3,enum=dfinance.dvm.LcsType" json:"type_tag,omitempty"`
	VectorType  *LcsTag      `protobuf:"bytes,2,opt,name=vector_type,json=vectorType,proto3" json:"vector_type,omitempty"`
	StructIdent *StructIdent `protobuf:"bytes,3,opt,name=struct_ident,json=structIdent,proto3" json:"struct_ident,omitempty"`
}

func (m *LcsTag) Reset()         { *m = LcsTag{} }
func (m *LcsTag) String() string { return proto.CompactTextString(m) }
func (*LcsTag) ProtoMessage()    {}
func (*LcsTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{8}
}
func (m *LcsTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LcsTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LcsTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LcsTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LcsTag.Merge(m, src)
}
func (m *LcsTag) XXX_Size() int {
	return m.Size()
}
func (m *LcsTag) XXX_DiscardUnknown() {
	xxx_messageInfo_LcsTag.DiscardUnknown(m)
}

var xxx_messageInfo_LcsTag proto.InternalMessageInfo

func (m *LcsTag) GetTypeTag() LcsType {
	if m != nil {
		return m.TypeTag
	}
	return LcsType_LcsBool
}

func (m *LcsTag) GetVectorType() *LcsTag {
	if m != nil {
		return m.VectorType
	}
	return nil
}

func (m *LcsTag) GetStructIdent() *StructIdent {
	if m != nil {
		return m.StructIdent
	}
	return nil
}

/// Module identifier.
type ModuleIdent struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ModuleIdent) Reset()         { *m = ModuleIdent{} }
func (m *ModuleIdent) String() string { return proto.CompactTextString(m) }
func (*ModuleIdent) ProtoMessage()    {}
func (*ModuleIdent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{9}
}
func (m *ModuleIdent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleIdent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleIdent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleIdent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleIdent.Merge(m, src)
}
func (m *ModuleIdent) XXX_Size() int {
	return m.Size()
}
func (m *ModuleIdent) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleIdent.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleIdent proto.InternalMessageInfo

func (m *ModuleIdent) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ModuleIdent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// VM event returns after contract execution.
type VMEvent struct {
	SenderAddress []byte       `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	SenderModule  *ModuleIdent `protobuf:"bytes,2,opt,name=sender_module,json=senderModule,proto3" json:"sender_module,omitempty"`
	EventType     *LcsTag      `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	EventData     []byte       `protobuf:"bytes,4,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`
}

func (m *VMEvent) Reset()         { *m = VMEvent{} }
func (m *VMEvent) String() string { return proto.CompactTextString(m) }
func (*VMEvent) ProtoMessage()    {}
func (*VMEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{10}
}
func (m *VMEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMEvent.Merge(m, src)
}
func (m *VMEvent) XXX_Size() int {
	return m.Size()
}
func (m *VMEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_VMEvent.DiscardUnknown(m)
}

var xxx_messageInfo_VMEvent proto.InternalMessageInfo

func (m *VMEvent) GetSenderAddress() []byte {
	if m != nil {
		return m.SenderAddress
	}
	return nil
}

func (m *VMEvent) GetSenderModule() *ModuleIdent {
	if m != nil {
		return m.SenderModule
	}
	return nil
}

func (m *VMEvent) GetEventType() *LcsTag {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (m *VMEvent) GetEventData() []byte {
	if m != nil {
		return m.EventData
	}
	return nil
}

// Storage path
type VMAccessPath struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Path    []byte `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *VMAccessPath) Reset()         { *m = VMAccessPath{} }
func (m *VMAccessPath) String() string { return proto.CompactTextString(m) }
func (*VMAccessPath) ProtoMessage()    {}
func (*VMAccessPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{11}
}
func (m *VMAccessPath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMAccessPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMAccessPath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMAccessPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMAccessPath.Merge(m, src)
}
func (m *VMAccessPath) XXX_Size() int {
	return m.Size()
}
func (m *VMAccessPath) XXX_DiscardUnknown() {
	xxx_messageInfo_VMAccessPath.DiscardUnknown(m)
}

var xxx_messageInfo_VMAccessPath proto.InternalMessageInfo

func (m *VMAccessPath) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *VMAccessPath) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

// VM value should be passed before execution and return after execution (with opcodes), write_set in nutshell.
type VMValue struct {
	Type  VmWriteOp     `protobuf:"varint,2,opt,name=type,proto3,enum=dfinance.dvm.VmWriteOp" json:"type,omitempty"`
	Value []byte        `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Path  *VMAccessPath `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *VMValue) Reset()         { *m = VMValue{} }
func (m *VMValue) String() string { return proto.CompactTextString(m) }
func (*VMValue) ProtoMessage()    {}
func (*VMValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{12}
}
func (m *VMValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMValue.Merge(m, src)
}
func (m *VMValue) XXX_Size() int {
	return m.Size()
}
func (m *VMValue) XXX_DiscardUnknown() {
	xxx_messageInfo_VMValue.DiscardUnknown(m)
}

var xxx_messageInfo_VMValue proto.InternalMessageInfo

func (m *VMValue) GetType() VmWriteOp {
	if m != nil {
		return m.Type
	}
	return VmWriteOp_Value
}

func (m *VMValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *VMValue) GetPath() *VMAccessPath {
	if m != nil {
		return m.Path
	}
	return nil
}

// Contract arguments.
type VMArgs struct {
	Type  VMTypeTag `protobuf:"varint,1,opt,name=type,proto3,enum=dfinance.dvm.VMTypeTag" json:"type,omitempty"`
	Value []byte    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *VMArgs) Reset()         { *m = VMArgs{} }
func (m *VMArgs) String() string { return proto.CompactTextString(m) }
func (*VMArgs) ProtoMessage()    {}
func (*VMArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{13}
}
func (m *VMArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMArgs.Merge(m, src)
}
func (m *VMArgs) XXX_Size() int {
	return m.Size()
}
func (m *VMArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_VMArgs.DiscardUnknown(m)
}

var xxx_messageInfo_VMArgs proto.InternalMessageInfo

func (m *VMArgs) GetType() VMTypeTag {
	if m != nil {
		return m.Type
	}
	return VMTypeTag_Bool
}

func (m *VMArgs) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// Publish module.
type VMPublishModule struct {
	Sender       []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MaxGasAmount uint64 `protobuf:"varint,2,opt,name=max_gas_amount,json=maxGasAmount,proto3" json:"max_gas_amount,omitempty"`
	GasUnitPrice uint64 `protobuf:"varint,3,opt,name=gas_unit_price,json=gasUnitPrice,proto3" json:"gas_unit_price,omitempty"`
	Code         []byte `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *VMPublishModule) Reset()         { *m = VMPublishModule{} }
func (m *VMPublishModule) String() string { return proto.CompactTextString(m) }
func (*VMPublishModule) ProtoMessage()    {}
func (*VMPublishModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{14}
}
func (m *VMPublishModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMPublishModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMPublishModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMPublishModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMPublishModule.Merge(m, src)
}
func (m *VMPublishModule) XXX_Size() int {
	return m.Size()
}
func (m *VMPublishModule) XXX_DiscardUnknown() {
	xxx_messageInfo_VMPublishModule.DiscardUnknown(m)
}

var xxx_messageInfo_VMPublishModule proto.InternalMessageInfo

func (m *VMPublishModule) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *VMPublishModule) GetMaxGasAmount() uint64 {
	if m != nil {
		return m.MaxGasAmount
	}
	return 0
}

func (m *VMPublishModule) GetGasUnitPrice() uint64 {
	if m != nil {
		return m.GasUnitPrice
	}
	return 0
}

func (m *VMPublishModule) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

// VM contract object to process.
type VMExecuteScript struct {
	Senders      [][]byte       `protobuf:"bytes,1,rep,name=senders,proto3" json:"senders,omitempty"`
	MaxGasAmount uint64         `protobuf:"varint,2,opt,name=max_gas_amount,json=maxGasAmount,proto3" json:"max_gas_amount,omitempty"`
	GasUnitPrice uint64         `protobuf:"varint,3,opt,name=gas_unit_price,json=gasUnitPrice,proto3" json:"gas_unit_price,omitempty"`
	Block        uint64         `protobuf:"varint,4,opt,name=block,proto3" json:"block,omitempty"`
	Timestamp    uint64         `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Code         []byte         `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	TypeParams   []*StructIdent `protobuf:"bytes,7,rep,name=type_params,json=typeParams,proto3" json:"type_params,omitempty"`
	Args         []*VMArgs      `protobuf:"bytes,8,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *VMExecuteScript) Reset()         { *m = VMExecuteScript{} }
func (m *VMExecuteScript) String() string { return proto.CompactTextString(m) }
func (*VMExecuteScript) ProtoMessage()    {}
func (*VMExecuteScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{15}
}
func (m *VMExecuteScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMExecuteScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMExecuteScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMExecuteScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMExecuteScript.Merge(m, src)
}
func (m *VMExecuteScript) XXX_Size() int {
	return m.Size()
}
func (m *VMExecuteScript) XXX_DiscardUnknown() {
	xxx_messageInfo_VMExecuteScript.DiscardUnknown(m)
}

var xxx_messageInfo_VMExecuteScript proto.InternalMessageInfo

func (m *VMExecuteScript) GetSenders() [][]byte {
	if m != nil {
		return m.Senders
	}
	return nil
}

func (m *VMExecuteScript) GetMaxGasAmount() uint64 {
	if m != nil {
		return m.MaxGasAmount
	}
	return 0
}

func (m *VMExecuteScript) GetGasUnitPrice() uint64 {
	if m != nil {
		return m.GasUnitPrice
	}
	return 0
}

func (m *VMExecuteScript) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *VMExecuteScript) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *VMExecuteScript) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *VMExecuteScript) GetTypeParams() []*StructIdent {
	if m != nil {
		return m.TypeParams
	}
	return nil
}

func (m *VMExecuteScript) GetArgs() []*VMArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type VMBalanceChange struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Ticker  string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// Types that are valid to be assigned to Op:
	//	*VMBalanceChange_Deposit
	//	*VMBalanceChange_Withdraw
	Op isVMBalanceChange_Op `protobuf_oneof:"op"`
}

func (m *VMBalanceChange) Reset()         { *m = VMBalanceChange{} }
func (m *VMBalanceChange) String() string { return proto.CompactTextString(m) }
func (*VMBalanceChange) ProtoMessage()    {}
func (*VMBalanceChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{16}
}
func (m *VMBalanceChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMBalanceChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMBalanceChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMBalanceChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMBalanceChange.Merge(m, src)
}
func (m *VMBalanceChange) XXX_Size() int {
	return m.Size()
}
func (m *VMBalanceChange) XXX_DiscardUnknown() {
	xxx_messageInfo_VMBalanceChange.DiscardUnknown(m)
}

var xxx_messageInfo_VMBalanceChange proto.InternalMessageInfo

type isVMBalanceChange_Op interface {
	isVMBalanceChange_Op()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VMBalanceChange_Deposit struct {
	Deposit *U128 `protobuf:"bytes,3,opt,name=deposit,proto3,oneof" json:"deposit,omitempty"`
}
type VMBalanceChange_Withdraw struct {
	Withdraw *U128 `protobuf:"bytes,4,opt,name=withdraw,proto3,oneof" json:"withdraw,omitempty"`
}

func (*VMBalanceChange_Deposit) isVMBalanceChange_Op()  {}
func (*VMBalanceChange_Withdraw) isVMBalanceChange_Op() {}

func (m *VMBalanceChange) GetOp() isVMBalanceChange_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *VMBalanceChange) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *VMBalanceChange) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *VMBalanceChange) GetDeposit() *U128 {
	if x, ok := m.GetOp().(*VMBalanceChange_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (m *VMBalanceChange) GetWithdraw() *U128 {
	if x, ok := m.GetOp().(*VMBalanceChange_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VMBalanceChange) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VMBalanceChange_Deposit)(nil),
		(*VMBalanceChange_Withdraw)(nil),
	}
}

type VMBalanceChangeSet struct {
	ChangeSet []*VMBalanceChange `protobuf:"bytes,1,rep,name=change_set,json=changeSet,proto3" json:"change_set,omitempty"`
}

func (m *VMBalanceChangeSet) Reset()         { *m = VMBalanceChangeSet{} }
func (m *VMBalanceChangeSet) String() string { return proto.CompactTextString(m) }
func (*VMBalanceChangeSet) ProtoMessage()    {}
func (*VMBalanceChangeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{17}
}
func (m *VMBalanceChangeSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMBalanceChangeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMBalanceChangeSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMBalanceChangeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMBalanceChangeSet.Merge(m, src)
}
func (m *VMBalanceChangeSet) XXX_Size() int {
	return m.Size()
}
func (m *VMBalanceChangeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_VMBalanceChangeSet.DiscardUnknown(m)
}

var xxx_messageInfo_VMBalanceChangeSet proto.InternalMessageInfo

func (m *VMBalanceChangeSet) GetChangeSet() []*VMBalanceChange {
	if m != nil {
		return m.ChangeSet
	}
	return nil
}

// Response from VM contains write_set, events, gas used and status for specific contract.
type VMExecuteResponse struct {
	WriteSet         []*VMValue         `protobuf:"bytes,1,rep,name=write_set,json=writeSet,proto3" json:"write_set,omitempty"`
	Events           []*VMEvent         `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	BalanceChangeSet []*VMBalanceChange `protobuf:"bytes,3,rep,name=balance_change_set,json=balanceChangeSet,proto3" json:"balance_change_set,omitempty"`
	GasUsed          uint64             `protobuf:"varint,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Status           *VMStatus          `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *VMExecuteResponse) Reset()         { *m = VMExecuteResponse{} }
func (m *VMExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*VMExecuteResponse) ProtoMessage()    {}
func (*VMExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{18}
}
func (m *VMExecuteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMExecuteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMExecuteResponse.Merge(m, src)
}
func (m *VMExecuteResponse) XXX_Size() int {
	return m.Size()
}
func (m *VMExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VMExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VMExecuteResponse proto.InternalMessageInfo

func (m *VMExecuteResponse) GetWriteSet() []*VMValue {
	if m != nil {
		return m.WriteSet
	}
	return nil
}

func (m *VMExecuteResponse) GetEvents() []*VMEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *VMExecuteResponse) GetBalanceChangeSet() []*VMBalanceChange {
	if m != nil {
		return m.BalanceChangeSet
	}
	return nil
}

func (m *VMExecuteResponse) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *VMExecuteResponse) GetStatus() *VMStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type MultipleCompilationResult struct {
	Units  []*CompiledUnit `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`
	Errors []string        `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *MultipleCompilationResult) Reset()         { *m = MultipleCompilationResult{} }
func (m *MultipleCompilationResult) String() string { return proto.CompactTextString(m) }
func (*MultipleCompilationResult) ProtoMessage()    {}
func (*MultipleCompilationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa38fa9ac8218d6, []int{19}
}
func (m *MultipleCompilationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultipleCompilationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultipleCompilationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultipleCompilationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultipleCompilationResult.Merge(m, src)
}
func (m *MultipleCompilationResult) XXX_Size() int {
	return m.Size()
}
func (m *MultipleCompilationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MultipleCompilationResult.DiscardUnknown(m)
}

var xxx_messageInfo_MultipleCompilationResult proto.InternalMessageInfo

func (m *MultipleCompilationResult) GetUnits() []*CompiledUnit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *MultipleCompilationResult) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterEnum("dfinance.dvm.LcsType", LcsType_name, LcsType_value)
	proto.RegisterEnum("dfinance.dvm.VmWriteOp", VmWriteOp_name, VmWriteOp_value)
	proto.RegisterType((*AbortLocation)(nil), "dfinance.dvm.AbortLocation")
	proto.RegisterType((*FunctionLoc)(nil), "dfinance.dvm.FunctionLoc")
	proto.RegisterType((*MoveError)(nil), "dfinance.dvm.MoveError")
	proto.RegisterType((*Abort)(nil), "dfinance.dvm.Abort")
	proto.RegisterType((*Failure)(nil), "dfinance.dvm.Failure")
	proto.RegisterType((*Message)(nil), "dfinance.dvm.Message")
	proto.RegisterType((*VMStatus)(nil), "dfinance.dvm.VMStatus")
	proto.RegisterType((*StructIdent)(nil), "dfinance.dvm.StructIdent")
	proto.RegisterType((*LcsTag)(nil), "dfinance.dvm.LcsTag")
	proto.RegisterType((*ModuleIdent)(nil), "dfinance.dvm.ModuleIdent")
	proto.RegisterType((*VMEvent)(nil), "dfinance.dvm.VMEvent")
	proto.RegisterType((*VMAccessPath)(nil), "dfinance.dvm.VMAccessPath")
	proto.RegisterType((*VMValue)(nil), "dfinance.dvm.VMValue")
	proto.RegisterType((*VMArgs)(nil), "dfinance.dvm.VMArgs")
	proto.RegisterType((*VMPublishModule)(nil), "dfinance.dvm.VMPublishModule")
	proto.RegisterType((*VMExecuteScript)(nil), "dfinance.dvm.VMExecuteScript")
	proto.RegisterType((*VMBalanceChange)(nil), "dfinance.dvm.VMBalanceChange")
	proto.RegisterType((*VMBalanceChangeSet)(nil), "dfinance.dvm.VMBalanceChangeSet")
	proto.RegisterType((*VMExecuteResponse)(nil), "dfinance.dvm.VMExecuteResponse")
	proto.RegisterType((*MultipleCompilationResult)(nil), "dfinance.dvm.MultipleCompilationResult")
}

func init() { proto.RegisterFile("dfinance/dvm/vm.proto", fileDescriptor_6aa38fa9ac8218d6) }

var fileDescriptor_6aa38fa9ac8218d6 = []byte{
	// 1333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xf6, 0x3a, 0xfe, 0xdb, 0x63, 0x27, 0xb8, 0x43, 0x5b, 0xdc, 0x94, 0xa4, 0xd5, 0xaa, 0x48,
	0x51, 0x4b, 0x1d, 0xea, 0x52, 0x14, 0x41, 0x85, 0x94, 0x34, 0x2d, 0x81, 0xc6, 0x6a, 0x98, 0xb4,
	0x46, 0xe2, 0x66, 0x35, 0xde, 0x1d, 0x3b, 0x4b, 0xbd, 0x3b, 0xab, 0x9d, 0x59, 0x27, 0x95, 0x78,
	0x01, 0xb8, 0x40, 0xbc, 0x04, 0x57, 0x20, 0xf1, 0x12, 0x5c, 0x70, 0xd9, 0x4b, 0x2e, 0x51, 0xfb,
	0x04, 0xbc, 0x01, 0x9a, 0x9f, 0x75, 0xbc, 0x5b, 0x37, 0xb4, 0x12, 0x77, 0x7b, 0xce, 0x7e, 0xe7,
	0xef, 0x3b, 0x67, 0xce, 0xec, 0xc2, 0x05, 0x7f, 0x14, 0x44, 0x24, 0xf2, 0xe8, 0xa6, 0x3f, 0x0d,
	0x37, 0xa7, 0x61, 0x37, 0x4e, 0x98, 0x60, 0xa8, 0x95, 0xa9, 0xbb, 0xfe, 0x34, 0x5c, 0xbd, 0x92,
	0x03, 0x79, 0x2c, 0x0c, 0x59, 0x74, 0x53, 0x3c, 0x8b, 0x29, 0xd7, 0xf0, 0xd5, 0xcb, 0x45, 0x40,
	0x1c, 0x4c, 0x68, 0xa2, 0x5f, 0x3a, 0xdb, 0xb0, 0xbc, 0x3d, 0x64, 0x89, 0xd8, 0x67, 0x1e, 0x11,
	0x01, 0x8b, 0x50, 0x07, 0xea, 0xc4, 0xf7, 0x13, 0xca, 0x79, 0xc7, 0xba, 0x6a, 0x6d, 0xb4, 0x70,
	0x26, 0xa2, 0x8b, 0x50, 0x0b, 0x99, 0x9f, 0x4e, 0x68, 0xa7, 0x7c, 0xd5, 0xda, 0xb0, 0xb1, 0x91,
	0x9c, 0xaf, 0xa0, 0xf9, 0x20, 0x8d, 0x3c, 0x69, 0xbd, 0xcf, 0x3c, 0xb4, 0x0a, 0x8d, 0x91, 0x11,
	0x95, 0x87, 0x0a, 0x9e, 0xc9, 0xe8, 0x0a, 0x34, 0x3d, 0xe6, 0x53, 0x97, 0x8d, 0x46, 0x9c, 0x0a,
	0xe5, 0xa7, 0x82, 0x41, 0xaa, 0x1e, 0x29, 0x8d, 0xf3, 0x21, 0xd8, 0x7d, 0x36, 0xa5, 0xf7, 0x93,
	0x84, 0x25, 0x12, 0xcd, 0x05, 0x11, 0x29, 0x77, 0x25, 0x22, 0x43, 0x6b, 0xd5, 0x3d, 0xe6, 0x53,
	0xe7, 0x3b, 0xa8, 0xaa, 0xe4, 0xd1, 0x0e, 0xac, 0x10, 0xf9, 0xe0, 0x4e, 0x4c, 0x19, 0x2a, 0x72,
	0xb3, 0x77, 0xb9, 0x3b, 0x4f, 0x55, 0x37, 0x57, 0x29, 0x5e, 0x26, 0xb9, 0xc2, 0xd7, 0x00, 0xb4,
	0x8f, 0xb9, 0x60, 0xb6, 0xd2, 0xa8, 0x58, 0xbf, 0x59, 0x50, 0x7f, 0x40, 0x82, 0x49, 0x9a, 0xd0,
	0x62, 0x62, 0x56, 0x31, 0xb1, 0x05, 0xf9, 0x94, 0xdf, 0x3a, 0x9f, 0xbb, 0xd0, 0xca, 0x78, 0x93,
	0x6e, 0x3a, 0x4b, 0xca, 0xc3, 0xa5, 0xbc, 0x87, 0x39, 0xe2, 0x71, 0x73, 0x74, 0x2a, 0x38, 0x6b,
	0x50, 0xef, 0x53, 0xce, 0xc9, 0x98, 0x22, 0x04, 0x15, 0x41, 0x4f, 0x84, 0x4a, 0xd3, 0xc6, 0xea,
	0xd9, 0xf9, 0xc7, 0x82, 0xc6, 0xa0, 0x7f, 0xa8, 0x32, 0x46, 0x5b, 0x00, 0x21, 0x9b, 0x52, 0x97,
	0x4a, 0xd6, 0x0d, 0x73, 0xef, 0xe5, 0xe3, 0xcc, 0x9a, 0xb2, 0x57, 0xc2, 0x76, 0x38, 0xeb, 0xd0,
	0x0d, 0xa8, 0xaa, 0xa4, 0x4d, 0x79, 0xef, 0x2e, 0x28, 0x6f, 0xaf, 0x84, 0x35, 0x06, 0xed, 0xc2,
	0x39, 0x7a, 0x42, 0xbd, 0x54, 0x55, 0x34, 0xd2, 0x54, 0x9a, 0xaa, 0x2e, 0x14, 0xaa, 0xd2, 0x2f,
	0xf7, 0x4a, 0xb8, 0x3d, 0xb3, 0xc8, 0xb8, 0xdf, 0x84, 0x7a, 0xa8, 0x0b, 0xeb, 0x54, 0x16, 0xd9,
	0x9a, 0xaa, 0x71, 0x86, 0xda, 0xa9, 0x43, 0x55, 0x15, 0xe6, 0xfc, 0x68, 0x41, 0xf3, 0x50, 0x24,
	0xa9, 0x27, 0xbe, 0xf4, 0x69, 0x24, 0xde, 0x7e, 0xd2, 0x25, 0x93, 0x11, 0x09, 0x75, 0xd2, 0x36,
	0x56, 0xcf, 0xe8, 0x0e, 0x34, 0xe5, 0x61, 0x73, 0x63, 0x92, 0x90, 0x90, 0x77, 0x2a, 0x57, 0x97,
	0x36, 0x9a, 0xbd, 0xf3, 0xf9, 0x9c, 0xf6, 0x3d, 0xfe, 0x98, 0x8c, 0x31, 0x48, 0xe0, 0x81, 0xc2,
	0x39, 0xbf, 0x5b, 0x50, 0xd3, 0x6a, 0xf4, 0x11, 0x34, 0x94, 0x07, 0x41, 0xc6, 0x2a, 0x91, 0x95,
	0x62, 0x49, 0x12, 0xf7, 0x2c, 0xa6, 0xb8, 0x2e, 0x61, 0xd2, 0xe2, 0x0e, 0x34, 0xa7, 0xd4, 0x13,
	0x2c, 0x71, 0xa5, 0xc6, 0x90, 0xff, 0x9a, 0x98, 0x1a, 0x28, 0xed, 0xe5, 0x44, 0x71, 0x55, 0xbf,
	0x1b, 0x48, 0x02, 0x16, 0x4f, 0xd4, 0x1c, 0x43, 0xb8, 0xc9, 0x4f, 0x05, 0xe7, 0x33, 0x68, 0xf6,
	0x15, 0x0d, 0xff, 0xc5, 0x5e, 0xc6, 0x52, 0xf9, 0x94, 0x25, 0xe7, 0x0f, 0x0b, 0xea, 0x83, 0xfe,
	0xfd, 0xa9, 0xb4, 0xfc, 0x00, 0x56, 0x38, 0x8d, 0x7c, 0x9a, 0xb8, 0x79, 0x07, 0xcb, 0x5a, 0xbb,
	0x6d, 0xdc, 0x7c, 0x0e, 0x46, 0xe1, 0xce, 0xf5, 0xe2, 0x95, 0x74, 0xe7, 0x52, 0xc2, 0x2d, 0x8d,
	0xd7, 0x2a, 0x74, 0x1b, 0x80, 0xca, 0x78, 0x9a, 0xa3, 0xa5, 0x33, 0x38, 0xb2, 0x15, 0x4e, 0x51,
	0xb4, 0x96, 0x19, 0xf9, 0x44, 0x10, 0x35, 0x60, 0x2d, 0xf3, 0x7a, 0x97, 0x08, 0xe2, 0xdc, 0x85,
	0xd6, 0xa0, 0xbf, 0xed, 0x79, 0x94, 0xf3, 0x03, 0x22, 0x8e, 0xce, 0x26, 0x21, 0x26, 0xe2, 0x48,
	0x25, 0xdd, 0xc2, 0xea, 0xd9, 0xf9, 0x5e, 0x72, 0x30, 0x20, 0x93, 0x94, 0xa2, 0x1b, 0x50, 0x99,
	0xb5, 0x6e, 0xa5, 0x78, 0xd8, 0x06, 0xe1, 0x37, 0x49, 0x20, 0xe8, 0xa3, 0x18, 0x2b, 0x10, 0x3a,
	0x0f, 0xd5, 0xa9, 0xb4, 0x32, 0x31, 0xb4, 0x80, 0xba, 0x26, 0x82, 0xae, 0x6c, 0xb5, 0xe0, 0x62,
	0x2e, 0x4b, 0x13, 0xfd, 0x21, 0xd4, 0x06, 0xfd, 0xed, 0x64, 0xcc, 0x67, 0xc1, 0xad, 0x85, 0xc1,
	0xfb, 0x8f, 0xf5, 0x94, 0x15, 0x83, 0x97, 0xe7, 0x82, 0x3b, 0x3f, 0x58, 0xf0, 0xce, 0xa0, 0x7f,
	0x90, 0x0e, 0x27, 0x01, 0x3f, 0x32, 0x84, 0x5f, 0x84, 0x9a, 0x6e, 0x80, 0xc9, 0xd3, 0x48, 0xe8,
	0x1a, 0xac, 0x84, 0xe4, 0xc4, 0x1d, 0x13, 0xee, 0x92, 0x90, 0xa5, 0x51, 0xb6, 0xf7, 0x5b, 0x21,
	0x39, 0xf9, 0x82, 0xf0, 0x6d, 0xa5, 0x93, 0x28, 0x89, 0x48, 0xa3, 0x40, 0xb8, 0x71, 0x12, 0x78,
	0xba, 0x65, 0x15, 0xdc, 0x1a, 0x13, 0xfe, 0x24, 0x0a, 0xc4, 0x81, 0xd4, 0x49, 0x5a, 0xd5, 0xca,
	0xd5, 0x9d, 0x51, 0xcf, 0xce, 0x2f, 0x65, 0x99, 0xcb, 0x7d, 0xb5, 0x28, 0xe8, 0xa1, 0x97, 0x04,
	0xb1, 0x9a, 0x4e, 0x1d, 0x5d, 0x36, 0x66, 0x49, 0x36, 0xc6, 0x88, 0xff, 0x6b, 0x36, 0xe7, 0xa1,
	0x3a, 0x9c, 0x30, 0xef, 0xa9, 0x4a, 0xa7, 0x82, 0xb5, 0x80, 0xde, 0x07, 0x5b, 0x04, 0x21, 0xe5,
	0x82, 0x84, 0x71, 0xa7, 0xaa, 0xef, 0x91, 0x99, 0x62, 0x56, 0x41, 0xed, 0xb4, 0x02, 0xf4, 0x69,
	0x7e, 0x87, 0xd4, 0xd5, 0x0e, 0x39, 0xe3, 0x5c, 0xce, 0x2d, 0x12, 0xb4, 0x01, 0x15, 0x92, 0x8c,
	0x79, 0xa7, 0xb1, 0x68, 0xf1, 0xe8, 0x86, 0x63, 0x85, 0x70, 0x7e, 0x55, 0x3d, 0xdb, 0x21, 0x13,
	0xf9, 0xfa, 0xde, 0x11, 0x89, 0xc6, 0xf4, 0xec, 0x1d, 0x28, 0x02, 0xef, 0x29, 0x4d, 0xb2, 0x1d,
	0xa8, 0x25, 0xd4, 0x85, 0xba, 0x4f, 0x63, 0xc6, 0x83, 0x6c, 0x7f, 0xa0, 0x7c, 0xc8, 0xf4, 0x56,
	0x6f, 0x6b, 0xaf, 0x84, 0x33, 0x90, 0xdc, 0x6e, 0xc7, 0x81, 0x38, 0xf2, 0x13, 0x72, 0x6c, 0x16,
	0xf6, 0x62, 0x83, 0x19, 0x6a, 0xa7, 0x02, 0x65, 0x16, 0x3b, 0x18, 0x50, 0x21, 0xd9, 0x43, 0x2a,
	0xd0, 0x5d, 0x00, 0x4f, 0x09, 0xae, 0xfc, 0x7e, 0xb0, 0x54, 0xcd, 0x6b, 0xc5, 0x9a, 0x73, 0x56,
	0xd8, 0xf6, 0x32, 0x6b, 0xe7, 0xa7, 0x32, 0x9c, 0x9b, 0x4d, 0x0a, 0xa6, 0x3c, 0x66, 0x11, 0xa7,
	0xa8, 0x07, 0xf6, 0xb1, 0x3c, 0x6f, 0x73, 0x2e, 0x2f, 0x14, 0x5d, 0xaa, 0x53, 0x8b, 0x1b, 0x0a,
	0x27, 0xf3, 0xb8, 0x09, 0x35, 0xb5, 0x15, 0x78, 0xa7, 0xbc, 0xd8, 0x40, 0xad, 0x3a, 0x6c, 0x40,
	0xe8, 0x21, 0xa0, 0xa1, 0x4e, 0xca, 0x9d, 0x4b, 0x7f, 0xe9, 0x4d, 0xd2, 0x6f, 0x0f, 0x8b, 0x1c,
	0x5c, 0x82, 0x86, 0x9a, 0x4d, 0x4e, 0x7d, 0x33, 0x78, 0x75, 0x39, 0x95, 0x9c, 0xfa, 0xa8, 0x0b,
	0x35, 0xfd, 0x15, 0xa2, 0xe6, 0xae, 0xd9, 0xbb, 0x58, 0xf4, 0xad, 0x6f, 0x7c, 0x6c, 0x50, 0x0e,
	0x85, 0x4b, 0xfd, 0x74, 0x22, 0x82, 0x78, 0x42, 0xef, 0xa9, 0xef, 0x42, 0xfd, 0x25, 0x42, 0x79,
	0x3a, 0x91, 0x9d, 0xab, 0xca, 0xf9, 0xe7, 0x86, 0x93, 0xc2, 0x86, 0xd1, 0x78, 0xea, 0xcb, 0xd3,
	0x80, 0x35, 0x50, 0xce, 0x8c, 0xba, 0x6a, 0x35, 0x2b, 0x36, 0x36, 0xd2, 0xf5, 0x63, 0xa8, 0x9b,
	0x3b, 0x0c, 0x35, 0xd5, 0xe3, 0x0e, 0x63, 0x93, 0x76, 0x09, 0x81, 0xba, 0x03, 0x9f, 0x7c, 0xf2,
	0x71, 0xdb, 0x42, 0xcb, 0x60, 0xef, 0x7b, 0x7c, 0xa0, 0x6e, 0xab, 0x76, 0x19, 0xad, 0x00, 0xec,
	0x7b, 0xdc, 0xdc, 0x05, 0xed, 0x25, 0x64, 0x43, 0x55, 0x42, 0xb7, 0xda, 0x15, 0xe3, 0xe2, 0xc9,
	0xad, 0xde, 0x56, 0xbb, 0x6a, 0xcc, 0x0e, 0x83, 0x71, 0x44, 0x93, 0x76, 0x2d, 0x13, 0xd5, 0x59,
	0x69, 0xd7, 0xaf, 0x5f, 0x03, 0x7b, 0xb6, 0x4c, 0xa5, 0x0b, 0xd5, 0xc6, 0x76, 0x09, 0xb5, 0xa0,
	0xb1, 0x4b, 0x27, 0x54, 0x16, 0xdb, 0xb6, 0x7a, 0x23, 0x39, 0x15, 0x7a, 0x89, 0x99, 0x8d, 0x46,
	0x13, 0xf4, 0x35, 0x2c, 0xe7, 0xd7, 0xdb, 0x2b, 0x7d, 0xca, 0xbd, 0x5e, 0xbd, 0xf2, 0xca, 0x04,
	0xe4, 0xc7, 0xcc, 0x29, 0xf5, 0x28, 0xb4, 0x07, 0x7d, 0xbd, 0xa0, 0xf4, 0x4b, 0xa6, 0xc2, 0xe4,
	0x37, 0xd7, 0xda, 0x6b, 0xfc, 0xe8, 0xd7, 0x6f, 0x10, 0x66, 0x67, 0xf7, 0xcf, 0x17, 0xeb, 0xd6,
	0xf3, 0x17, 0xeb, 0xd6, 0xdf, 0x2f, 0xd6, 0xad, 0x9f, 0x5f, 0xae, 0x97, 0x9e, 0xbf, 0x5c, 0x2f,
	0xfd, 0xf5, 0x72, 0xbd, 0xf4, 0xed, 0xf5, 0x71, 0x20, 0x8e, 0xd2, 0x61, 0xd7, 0x63, 0xe1, 0xe6,
	0xe9, 0x4f, 0x81, 0x9c, 0x85, 0x80, 0x45, 0x9b, 0xf1, 0xd3, 0xf1, 0xa6, 0xfa, 0x6f, 0x90, 0xff,
	0x09, 0xc3, 0x9a, 0xfa, 0x3f, 0xb8, 0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x17, 0x1d, 0xb3,
	0xac, 0x84, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VMModulePublisherClient is the client API for VMModulePublisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMModulePublisherClient interface {
	PublishModule(ctx context.Context, in *VMPublishModule, opts ...grpc.CallOption) (*VMExecuteResponse, error)
}

type vMModulePublisherClient struct {
	cc grpc1.ClientConn
}

func NewVMModulePublisherClient(cc grpc1.ClientConn) VMModulePublisherClient {
	return &vMModulePublisherClient{cc}
}

func (c *vMModulePublisherClient) PublishModule(ctx context.Context, in *VMPublishModule, opts ...grpc.CallOption) (*VMExecuteResponse, error) {
	out := new(VMExecuteResponse)
	err := c.cc.Invoke(ctx, "/dfinance.dvm.VMModulePublisher/PublishModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMModulePublisherServer is the server API for VMModulePublisher service.
type VMModulePublisherServer interface {
	PublishModule(context.Context, *VMPublishModule) (*VMExecuteResponse, error)
}

// UnimplementedVMModulePublisherServer can be embedded to have forward compatible implementations.
type UnimplementedVMModulePublisherServer struct {
}

func (*UnimplementedVMModulePublisherServer) PublishModule(ctx context.Context, req *VMPublishModule) (*VMExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishModule not implemented")
}

func RegisterVMModulePublisherServer(s grpc1.Server, srv VMModulePublisherServer) {
	s.RegisterService(&_VMModulePublisher_serviceDesc, srv)
}

func _VMModulePublisher_PublishModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPublishModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMModulePublisherServer).PublishModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.dvm.VMModulePublisher/PublishModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMModulePublisherServer).PublishModule(ctx, req.(*VMPublishModule))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMModulePublisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfinance.dvm.VMModulePublisher",
	HandlerType: (*VMModulePublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishModule",
			Handler:    _VMModulePublisher_PublishModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfinance/dvm/vm.proto",
}

// VMScriptExecutorClient is the client API for VMScriptExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMScriptExecutorClient interface {
	ExecuteScript(ctx context.Context, in *VMExecuteScript, opts ...grpc.CallOption) (*VMExecuteResponse, error)
}

type vMScriptExecutorClient struct {
	cc grpc1.ClientConn
}

func NewVMScriptExecutorClient(cc grpc1.ClientConn) VMScriptExecutorClient {
	return &vMScriptExecutorClient{cc}
}

func (c *vMScriptExecutorClient) ExecuteScript(ctx context.Context, in *VMExecuteScript, opts ...grpc.CallOption) (*VMExecuteResponse, error) {
	out := new(VMExecuteResponse)
	err := c.cc.Invoke(ctx, "/dfinance.dvm.VMScriptExecutor/ExecuteScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMScriptExecutorServer is the server API for VMScriptExecutor service.
type VMScriptExecutorServer interface {
	ExecuteScript(context.Context, *VMExecuteScript) (*VMExecuteResponse, error)
}

// UnimplementedVMScriptExecutorServer can be embedded to have forward compatible implementations.
type UnimplementedVMScriptExecutorServer struct {
}

func (*UnimplementedVMScriptExecutorServer) ExecuteScript(ctx context.Context, req *VMExecuteScript) (*VMExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteScript not implemented")
}

func RegisterVMScriptExecutorServer(s grpc1.Server, srv VMScriptExecutorServer) {
	s.RegisterService(&_VMScriptExecutor_serviceDesc, srv)
}

func _VMScriptExecutor_ExecuteScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMExecuteScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMScriptExecutorServer).ExecuteScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.dvm.VMScriptExecutor/ExecuteScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMScriptExecutorServer).ExecuteScript(ctx, req.(*VMExecuteScript))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMScriptExecutor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfinance.dvm.VMScriptExecutor",
	HandlerType: (*VMScriptExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteScript",
			Handler:    _VMScriptExecutor_ExecuteScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfinance/dvm/vm.proto",
}

func (m *AbortLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbortLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AbortLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FunctionLoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionLoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionLoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CodeOffset != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.CodeOffset))
		i--
		dAtA[i] = 0x10
	}
	if m.Function != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.Function))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MoveError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoveError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StatusCode != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.StatusCode))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Abort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Abort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Abort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AbortCode != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.AbortCode))
		i--
		dAtA[i] = 0x10
	}
	if m.AbortLocation != nil {
		{
			size, err := m.AbortLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FunctionLoc != nil {
		{
			size, err := m.FunctionLoc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AbortLocation != nil {
		{
			size, err := m.AbortLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StatusCode != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.StatusCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Error != nil {
		{
			size := m.Error.Size()
			i -= size
			if _, err := m.Error.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VMStatus_MoveError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMStatus_MoveError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MoveError != nil {
		{
			size, err := m.MoveError.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *VMStatus_Abort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMStatus_Abort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Abort != nil {
		{
			size, err := m.Abort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *VMStatus_ExecutionFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMStatus_ExecutionFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecutionFailure != nil {
		{
			size, err := m.ExecutionFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *StructIdent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StructIdent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StructIdent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TypeParams) > 0 {
		for iNdEx := len(m.TypeParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TypeParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LcsTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LcsTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LcsTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StructIdent != nil {
		{
			size, err := m.StructIdent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VectorType != nil {
		{
			size, err := m.VectorType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TypeTag != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.TypeTag))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleIdent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleIdent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleIdent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventData) > 0 {
		i -= len(m.EventData)
		copy(dAtA[i:], m.EventData)
		i = encodeVarintVm(dAtA, i, uint64(len(m.EventData)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventType != nil {
		{
			size, err := m.EventType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SenderModule != nil {
		{
			size, err := m.SenderModule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintVm(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMAccessPath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMAccessPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMAccessPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VMPublishModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMPublishModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMPublishModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x22
	}
	if m.GasUnitPrice != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.GasUnitPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxGasAmount != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.MaxGasAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMExecuteScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMExecuteScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMExecuteScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.TypeParams) > 0 {
		for iNdEx := len(m.TypeParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TypeParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x32
	}
	if m.Timestamp != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.Block != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x20
	}
	if m.GasUnitPrice != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.GasUnitPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxGasAmount != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.MaxGasAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Senders) > 0 {
		for iNdEx := len(m.Senders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Senders[iNdEx])
			copy(dAtA[i:], m.Senders[iNdEx])
			i = encodeVarintVm(dAtA, i, uint64(len(m.Senders[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VMBalanceChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMBalanceChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMBalanceChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Op != nil {
		{
			size := m.Op.Size()
			i -= size
			if _, err := m.Op.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVm(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMBalanceChange_Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMBalanceChange_Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Deposit != nil {
		{
			size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *VMBalanceChange_Withdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMBalanceChange_Withdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Withdraw != nil {
		{
			size, err := m.Withdraw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *VMBalanceChangeSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMBalanceChangeSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMBalanceChangeSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChangeSet) > 0 {
		for iNdEx := len(m.ChangeSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChangeSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VMExecuteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMExecuteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMExecuteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GasUsed != 0 {
		i = encodeVarintVm(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BalanceChangeSet) > 0 {
		for iNdEx := len(m.BalanceChangeSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BalanceChangeSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WriteSet) > 0 {
		for iNdEx := len(m.WriteSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WriteSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MultipleCompilationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultipleCompilationResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultipleCompilationResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintVm(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Units) > 0 {
		for iNdEx := len(m.Units) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Units[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVm(dAtA []byte, offset int, v uint64) int {
	offset -= sovVm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AbortLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *FunctionLoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Function != 0 {
		n += 1 + sovVm(uint64(m.Function))
	}
	if m.CodeOffset != 0 {
		n += 1 + sovVm(uint64(m.CodeOffset))
	}
	return n
}

func (m *MoveError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovVm(uint64(m.StatusCode))
	}
	return n
}

func (m *Abort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbortLocation != nil {
		l = m.AbortLocation.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	if m.AbortCode != 0 {
		n += 1 + sovVm(uint64(m.AbortCode))
	}
	return n
}

func (m *Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovVm(uint64(m.StatusCode))
	}
	if m.AbortLocation != nil {
		l = m.AbortLocation.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	if m.FunctionLoc != nil {
		l = m.FunctionLoc.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *VMStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += m.Error.Size()
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *VMStatus_MoveError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MoveError != nil {
		l = m.MoveError.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}
func (m *VMStatus_Abort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Abort != nil {
		l = m.Abort.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}
func (m *VMStatus_ExecutionFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionFailure != nil {
		l = m.ExecutionFailure.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}
func (m *StructIdent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if len(m.TypeParams) > 0 {
		for _, e := range m.TypeParams {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	return n
}

func (m *LcsTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeTag != 0 {
		n += 1 + sovVm(uint64(m.TypeTag))
	}
	if m.VectorType != nil {
		l = m.VectorType.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	if m.StructIdent != nil {
		l = m.StructIdent.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *ModuleIdent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *VMEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if m.SenderModule != nil {
		l = m.SenderModule.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	if m.EventType != nil {
		l = m.EventType.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.EventData)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *VMAccessPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *VMValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovVm(uint64(m.Type))
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *VMArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovVm(uint64(m.Type))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *VMPublishModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if m.MaxGasAmount != 0 {
		n += 1 + sovVm(uint64(m.MaxGasAmount))
	}
	if m.GasUnitPrice != 0 {
		n += 1 + sovVm(uint64(m.GasUnitPrice))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *VMExecuteScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Senders) > 0 {
		for _, b := range m.Senders {
			l = len(b)
			n += 1 + l + sovVm(uint64(l))
		}
	}
	if m.MaxGasAmount != 0 {
		n += 1 + sovVm(uint64(m.MaxGasAmount))
	}
	if m.GasUnitPrice != 0 {
		n += 1 + sovVm(uint64(m.GasUnitPrice))
	}
	if m.Block != 0 {
		n += 1 + sovVm(uint64(m.Block))
	}
	if m.Timestamp != 0 {
		n += 1 + sovVm(uint64(m.Timestamp))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if len(m.TypeParams) > 0 {
		for _, e := range m.TypeParams {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	return n
}

func (m *VMBalanceChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if m.Op != nil {
		n += m.Op.Size()
	}
	return n
}

func (m *VMBalanceChange_Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deposit != nil {
		l = m.Deposit.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}
func (m *VMBalanceChange_Withdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Withdraw != nil {
		l = m.Withdraw.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}
func (m *VMBalanceChangeSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChangeSet) > 0 {
		for _, e := range m.ChangeSet {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	return n
}

func (m *VMExecuteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WriteSet) > 0 {
		for _, e := range m.WriteSet {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	if len(m.BalanceChangeSet) > 0 {
		for _, e := range m.BalanceChangeSet {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	if m.GasUsed != 0 {
		n += 1 + sovVm(uint64(m.GasUsed))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovVm(uint64(l))
	}
	return n
}

func (m *MultipleCompilationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovVm(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovVm(uint64(l))
		}
	}
	return n
}

func sovVm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVm(x uint64) (n int) {
	return sovVm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AbortLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbortLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbortLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FunctionLoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionLoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionLoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			m.Function = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Function |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeOffset", wireType)
			}
			m.CodeOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Abort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Abort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Abort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbortLocation == nil {
				m.AbortLocation = &AbortLocation{}
			}
			if err := m.AbortLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortCode", wireType)
			}
			m.AbortCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbortCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbortLocation == nil {
				m.AbortLocation = &AbortLocation{}
			}
			if err := m.AbortLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionLoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FunctionLoc == nil {
				m.FunctionLoc = &FunctionLoc{}
			}
			if err := m.FunctionLoc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MoveError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &VMStatus_MoveError{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Abort{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &VMStatus_Abort{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Failure{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &VMStatus_ExecutionFailure{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StructIdent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StructIdent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StructIdent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeParams = append(m.TypeParams, &LcsTag{})
			if err := m.TypeParams[len(m.TypeParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LcsTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LcsTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LcsTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeTag", wireType)
			}
			m.TypeTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeTag |= LcsType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VectorType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VectorType == nil {
				m.VectorType = &LcsTag{}
			}
			if err := m.VectorType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructIdent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StructIdent == nil {
				m.StructIdent = &StructIdent{}
			}
			if err := m.StructIdent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleIdent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleIdent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleIdent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = append(m.SenderAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderAddress == nil {
				m.SenderAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderModule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderModule == nil {
				m.SenderModule = &ModuleIdent{}
			}
			if err := m.SenderModule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventType == nil {
				m.EventType = &LcsTag{}
			}
			if err := m.EventType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventData = append(m.EventData[:0], dAtA[iNdEx:postIndex]...)
			if m.EventData == nil {
				m.EventData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMAccessPath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMAccessPath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMAccessPath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path[:0], dAtA[iNdEx:postIndex]...)
			if m.Path == nil {
				m.Path = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VmWriteOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &VMAccessPath{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VMTypeTag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMPublishModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMPublishModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMPublishModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasAmount", wireType)
			}
			m.MaxGasAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUnitPrice", wireType)
			}
			m.GasUnitPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUnitPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMExecuteScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMExecuteScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMExecuteScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Senders", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Senders = append(m.Senders, make([]byte, postIndex-iNdEx))
			copy(m.Senders[len(m.Senders)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasAmount", wireType)
			}
			m.MaxGasAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUnitPrice", wireType)
			}
			m.GasUnitPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUnitPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeParams = append(m.TypeParams, &StructIdent{})
			if err := m.TypeParams[len(m.TypeParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &VMArgs{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMBalanceChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMBalanceChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMBalanceChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &U128{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &VMBalanceChange_Deposit{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &U128{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &VMBalanceChange_Withdraw{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMBalanceChangeSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMBalanceChangeSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMBalanceChangeSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeSet = append(m.ChangeSet, &VMBalanceChange{})
			if err := m.ChangeSet[len(m.ChangeSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMExecuteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriteSet = append(m.WriteSet, &VMValue{})
			if err := m.WriteSet[len(m.WriteSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &VMEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceChangeSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceChangeSet = append(m.BalanceChangeSet, &VMBalanceChange{})
			if err := m.BalanceChangeSet[len(m.BalanceChangeSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &VMStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultipleCompilationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultipleCompilationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultipleCompilationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, &CompiledUnit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVm = fmt.Errorf("proto: unexpected end of group")
)
