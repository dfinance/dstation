// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dfinance/dvm/common-types.proto

package dvm

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Type of contract argument.
type VMTypeTag int32

const (
	VMTypeTag_Bool    VMTypeTag = 0
	VMTypeTag_U64     VMTypeTag = 1
	VMTypeTag_Vector  VMTypeTag = 2
	VMTypeTag_Address VMTypeTag = 3
	VMTypeTag_U8      VMTypeTag = 4
	VMTypeTag_U128    VMTypeTag = 5
)

var VMTypeTag_name = map[int32]string{
	0: "Bool",
	1: "U64",
	2: "Vector",
	3: "Address",
	4: "U8",
	5: "U128",
}

var VMTypeTag_value = map[string]int32{
	"Bool":    0,
	"U64":     1,
	"Vector":  2,
	"Address": 3,
	"U8":      4,
	"U128":    5,
}

func (x VMTypeTag) String() string {
	return proto.EnumName(VMTypeTag_name, int32(x))
}

func (VMTypeTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c41ce4bb2a9f467, []int{0}
}

/// u128 type.
type U128 struct {
	Buf []byte `protobuf:"bytes,1,opt,name=buf,proto3" json:"buf,omitempty"`
}

func (m *U128) Reset()         { *m = U128{} }
func (m *U128) String() string { return proto.CompactTextString(m) }
func (*U128) ProtoMessage()    {}
func (*U128) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c41ce4bb2a9f467, []int{0}
}
func (m *U128) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *U128) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_U128.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *U128) XXX_Merge(src proto.Message) {
	xxx_messageInfo_U128.Merge(m, src)
}
func (m *U128) XXX_Size() int {
	return m.Size()
}
func (m *U128) XXX_DiscardUnknown() {
	xxx_messageInfo_U128.DiscardUnknown(m)
}

var xxx_messageInfo_U128 proto.InternalMessageInfo

func (m *U128) GetBuf() []byte {
	if m != nil {
		return m.Buf
	}
	return nil
}

func init() {
	proto.RegisterEnum("dfinance.dvm.VMTypeTag", VMTypeTag_name, VMTypeTag_value)
	proto.RegisterType((*U128)(nil), "dfinance.dvm.u128")
}

func init() { proto.RegisterFile("dfinance/dvm/common-types.proto", fileDescriptor_9c41ce4bb2a9f467) }

var fileDescriptor_9c41ce4bb2a9f467 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0x49, 0xcb, 0xcc,
	0x4b, 0xcc, 0x4b, 0x4e, 0xd5, 0x4f, 0x29, 0xcb, 0xd5, 0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3,
	0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x81, 0x29, 0xd0,
	0x4b, 0x29, 0xcb, 0x55, 0x92, 0xe0, 0x62, 0x29, 0x35, 0x34, 0xb2, 0x10, 0x12, 0xe0, 0x62, 0x4e,
	0x2a, 0x4d, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0x31, 0xb5, 0x3c, 0xb9, 0x38, 0xc3,
	0x7c, 0x43, 0x2a, 0x0b, 0x52, 0x43, 0x12, 0xd3, 0x85, 0x38, 0xb8, 0x58, 0x9c, 0xf2, 0xf3, 0x73,
	0x04, 0x18, 0x84, 0xd8, 0xb9, 0x98, 0x43, 0xcd, 0x4c, 0x04, 0x18, 0x85, 0xb8, 0xb8, 0xd8, 0xc2,
	0x52, 0x93, 0x4b, 0xf2, 0x8b, 0x04, 0x98, 0x84, 0xb8, 0xb9, 0xd8, 0x1d, 0x53, 0x52, 0x8a, 0x52,
	0x8b, 0x8b, 0x05, 0x98, 0x85, 0xd8, 0xb8, 0x98, 0x42, 0x2d, 0x04, 0x58, 0x40, 0x7a, 0x42, 0x0d,
	0x8d, 0x2c, 0x04, 0x58, 0x9d, 0x5c, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21,
	0x4a, 0x2b, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xe1, 0xf0, 0xe2,
	0x92, 0xc4, 0x92, 0xcc, 0xfc, 0x3c, 0xfd, 0x82, 0xec, 0x74, 0x7d, 0xb0, 0xd3, 0x41, 0x7e, 0x49,
	0x62, 0x03, 0xbb, 0xdf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x76, 0xdc, 0xee, 0xe2, 0x00,
	0x00, 0x00,
}

func (m *U128) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *U128) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *U128) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buf) > 0 {
		i -= len(m.Buf)
		copy(dAtA[i:], m.Buf)
		i = encodeVarintCommonTypes(dAtA, i, uint64(len(m.Buf)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommonTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommonTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *U128) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buf)
	if l > 0 {
		n += 1 + l + sovCommonTypes(uint64(l))
	}
	return n
}

func sovCommonTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommonTypes(x uint64) (n int) {
	return sovCommonTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *U128) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: u128: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: u128: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buf", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommonTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buf = append(m.Buf[:0], dAtA[iNdEx:postIndex]...)
			if m.Buf == nil {
				m.Buf = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommonTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommonTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommonTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommonTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommonTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommonTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommonTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommonTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommonTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommonTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommonTypes = fmt.Errorf("proto: unexpected end of group")
)
