// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dfinance/dvm/metadata.proto

package dvm

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Bytecode.
type Bytecode struct {
	Code []byte `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *Bytecode) Reset()         { *m = Bytecode{} }
func (m *Bytecode) String() string { return proto.CompactTextString(m) }
func (*Bytecode) ProtoMessage()    {}
func (*Bytecode) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b64f53b3e4f31a3, []int{0}
}
func (m *Bytecode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bytecode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bytecode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bytecode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bytecode.Merge(m, src)
}
func (m *Bytecode) XXX_Size() int {
	return m.Size()
}
func (m *Bytecode) XXX_DiscardUnknown() {
	xxx_messageInfo_Bytecode.DiscardUnknown(m)
}

var xxx_messageInfo_Bytecode proto.InternalMessageInfo

func (m *Bytecode) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

// Struct field.
type Field struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Field) Reset()         { *m = Field{} }
func (m *Field) String() string { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()    {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b64f53b3e4f31a3, []int{1}
}
func (m *Field) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Field.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(m, src)
}
func (m *Field) XXX_Size() int {
	return m.Size()
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

/// Struct representation.
type Struct struct {
	Name           string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsResource     bool     `protobuf:"varint,2,opt,name=isResource,proto3" json:"isResource,omitempty"`
	TypeParameters []string `protobuf:"bytes,3,rep,name=type_parameters,json=typeParameters,proto3" json:"type_parameters,omitempty"`
	Field          []*Field `protobuf:"bytes,4,rep,name=field,proto3" json:"field,omitempty"`
}

func (m *Struct) Reset()         { *m = Struct{} }
func (m *Struct) String() string { return proto.CompactTextString(m) }
func (*Struct) ProtoMessage()    {}
func (*Struct) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b64f53b3e4f31a3, []int{2}
}
func (m *Struct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Struct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Struct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Struct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Struct.Merge(m, src)
}
func (m *Struct) XXX_Size() int {
	return m.Size()
}
func (m *Struct) XXX_DiscardUnknown() {
	xxx_messageInfo_Struct.DiscardUnknown(m)
}

var xxx_messageInfo_Struct proto.InternalMessageInfo

func (m *Struct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Struct) GetIsResource() bool {
	if m != nil {
		return m.IsResource
	}
	return false
}

func (m *Struct) GetTypeParameters() []string {
	if m != nil {
		return m.TypeParameters
	}
	return nil
}

func (m *Struct) GetField() []*Field {
	if m != nil {
		return m.Field
	}
	return nil
}

/// Function representation.
type Function struct {
	Name           string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsPublic       bool     `protobuf:"varint,2,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	IsNative       bool     `protobuf:"varint,3,opt,name=isNative,proto3" json:"isNative,omitempty"`
	TypeParameters []string `protobuf:"bytes,4,rep,name=type_parameters,json=typeParameters,proto3" json:"type_parameters,omitempty"`
	Arguments      []string `protobuf:"bytes,5,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Returns        []string `protobuf:"bytes,6,rep,name=returns,proto3" json:"returns,omitempty"`
}

func (m *Function) Reset()         { *m = Function{} }
func (m *Function) String() string { return proto.CompactTextString(m) }
func (*Function) ProtoMessage()    {}
func (*Function) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b64f53b3e4f31a3, []int{3}
}
func (m *Function) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Function) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Function.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Function) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Function.Merge(m, src)
}
func (m *Function) XXX_Size() int {
	return m.Size()
}
func (m *Function) XXX_DiscardUnknown() {
	xxx_messageInfo_Function.DiscardUnknown(m)
}

var xxx_messageInfo_Function proto.InternalMessageInfo

func (m *Function) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Function) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func (m *Function) GetIsNative() bool {
	if m != nil {
		return m.IsNative
	}
	return false
}

func (m *Function) GetTypeParameters() []string {
	if m != nil {
		return m.TypeParameters
	}
	return nil
}

func (m *Function) GetArguments() []string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *Function) GetReturns() []string {
	if m != nil {
		return m.Returns
	}
	return nil
}

// Script metadata.
type ScriptMeta struct {
	SignersCount   uint32      `protobuf:"varint,1,opt,name=signers_count,json=signersCount,proto3" json:"signers_count,omitempty"`
	TypeParameters []string    `protobuf:"bytes,2,rep,name=type_parameters,json=typeParameters,proto3" json:"type_parameters,omitempty"`
	Arguments      []VMTypeTag `protobuf:"varint,3,rep,packed,name=arguments,proto3,enum=dfinance.dvm.VMTypeTag" json:"arguments,omitempty"`
}

func (m *ScriptMeta) Reset()         { *m = ScriptMeta{} }
func (m *ScriptMeta) String() string { return proto.CompactTextString(m) }
func (*ScriptMeta) ProtoMessage()    {}
func (*ScriptMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b64f53b3e4f31a3, []int{4}
}
func (m *ScriptMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScriptMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScriptMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScriptMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptMeta.Merge(m, src)
}
func (m *ScriptMeta) XXX_Size() int {
	return m.Size()
}
func (m *ScriptMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptMeta proto.InternalMessageInfo

func (m *ScriptMeta) GetSignersCount() uint32 {
	if m != nil {
		return m.SignersCount
	}
	return 0
}

func (m *ScriptMeta) GetTypeParameters() []string {
	if m != nil {
		return m.TypeParameters
	}
	return nil
}

func (m *ScriptMeta) GetArguments() []VMTypeTag {
	if m != nil {
		return m.Arguments
	}
	return nil
}

// Module metadata.
type ModuleMeta struct {
	Name      string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Types     []*Struct   `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	Functions []*Function `protobuf:"bytes,3,rep,name=functions,proto3" json:"functions,omitempty"`
}

func (m *ModuleMeta) Reset()         { *m = ModuleMeta{} }
func (m *ModuleMeta) String() string { return proto.CompactTextString(m) }
func (*ModuleMeta) ProtoMessage()    {}
func (*ModuleMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b64f53b3e4f31a3, []int{5}
}
func (m *ModuleMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleMeta.Merge(m, src)
}
func (m *ModuleMeta) XXX_Size() int {
	return m.Size()
}
func (m *ModuleMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleMeta proto.InternalMessageInfo

func (m *ModuleMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModuleMeta) GetTypes() []*Struct {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *ModuleMeta) GetFunctions() []*Function {
	if m != nil {
		return m.Functions
	}
	return nil
}

// Bytecode metadata.
type Metadata struct {
	// Types that are valid to be assigned to Meta:
	//	*Metadata_Script
	//	*Metadata_Module
	Meta isMetadata_Meta `protobuf_oneof:"meta"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b64f53b3e4f31a3, []int{6}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

type isMetadata_Meta interface {
	isMetadata_Meta()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Metadata_Script struct {
	Script *ScriptMeta `protobuf:"bytes,1,opt,name=script,proto3,oneof" json:"script,omitempty"`
}
type Metadata_Module struct {
	Module *ModuleMeta `protobuf:"bytes,2,opt,name=module,proto3,oneof" json:"module,omitempty"`
}

func (*Metadata_Script) isMetadata_Meta() {}
func (*Metadata_Module) isMetadata_Meta() {}

func (m *Metadata) GetMeta() isMetadata_Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Metadata) GetScript() *ScriptMeta {
	if x, ok := m.GetMeta().(*Metadata_Script); ok {
		return x.Script
	}
	return nil
}

func (m *Metadata) GetModule() *ModuleMeta {
	if x, ok := m.GetMeta().(*Metadata_Module); ok {
		return x.Module
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Metadata) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Metadata_Script)(nil),
		(*Metadata_Module)(nil),
	}
}

func init() {
	proto.RegisterType((*Bytecode)(nil), "dfinance.dvm.Bytecode")
	proto.RegisterType((*Field)(nil), "dfinance.dvm.Field")
	proto.RegisterType((*Struct)(nil), "dfinance.dvm.Struct")
	proto.RegisterType((*Function)(nil), "dfinance.dvm.Function")
	proto.RegisterType((*ScriptMeta)(nil), "dfinance.dvm.ScriptMeta")
	proto.RegisterType((*ModuleMeta)(nil), "dfinance.dvm.ModuleMeta")
	proto.RegisterType((*Metadata)(nil), "dfinance.dvm.Metadata")
}

func init() { proto.RegisterFile("dfinance/dvm/metadata.proto", fileDescriptor_4b64f53b3e4f31a3) }

var fileDescriptor_4b64f53b3e4f31a3 = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xc7, 0x9b, 0xed, 0x07, 0xed, 0x74, 0x77, 0x91, 0xb2, 0x08, 0xa2, 0x82, 0x42, 0x15, 0x0e,
	0x94, 0x95, 0x68, 0xa4, 0x00, 0x67, 0xa4, 0xb2, 0x5a, 0xb8, 0x14, 0xad, 0xb2, 0xab, 0x1e, 0xb8,
	0xac, 0xdc, 0xc4, 0x2d, 0x11, 0xb5, 0x1d, 0xd9, 0x4e, 0xa5, 0x72, 0xe4, 0x09, 0x96, 0xa7, 0xe1,
	0x15, 0x38, 0xee, 0x91, 0x23, 0x6a, 0x5f, 0x04, 0xd9, 0x4e, 0xd2, 0x0f, 0x72, 0x8a, 0xfd, 0x9f,
	0xff, 0x38, 0xbf, 0x19, 0x7b, 0xe0, 0x69, 0x3c, 0x4b, 0x28, 0xa2, 0x11, 0xf6, 0xe3, 0x25, 0xf1,
	0x09, 0x96, 0x28, 0x46, 0x12, 0x0d, 0x53, 0xce, 0x24, 0xb3, 0x8f, 0x8b, 0xe0, 0x30, 0x5e, 0x92,
	0xde, 0xf3, 0x3d, 0x6b, 0xc4, 0x08, 0x61, 0xf4, 0xb5, 0x5c, 0xa5, 0x58, 0x18, 0xbb, 0xe7, 0x42,
	0x7b, 0xb4, 0x92, 0x38, 0x62, 0x31, 0xb6, 0x6d, 0x68, 0xa8, 0xaf, 0x63, 0xf5, 0xad, 0xc1, 0x71,
	0xa8, 0xd7, 0x9e, 0x0f, 0xcd, 0xcb, 0x04, 0x2f, 0x62, 0x15, 0xa4, 0x88, 0x98, 0x60, 0x27, 0xd4,
	0x6b, 0xa5, 0xa9, 0xb3, 0x9c, 0x23, 0xa3, 0xa9, 0xb5, 0x77, 0x67, 0x41, 0xeb, 0x5a, 0xf2, 0x2c,
	0x92, 0x95, 0x29, 0x2e, 0x40, 0x22, 0x42, 0x2c, 0x58, 0xc6, 0x23, 0x93, 0xd8, 0x0e, 0x77, 0x14,
	0xfb, 0x25, 0x3c, 0x54, 0xc7, 0xdc, 0xa6, 0x88, 0x23, 0x82, 0x25, 0xe6, 0xc2, 0xa9, 0xf7, 0xeb,
	0x83, 0x4e, 0x78, 0xaa, 0xe4, 0xab, 0x52, 0xb5, 0x5f, 0x41, 0x73, 0xa6, 0xc0, 0x9c, 0x46, 0xbf,
	0x3e, 0xe8, 0x06, 0x67, 0xc3, 0xdd, 0xba, 0x87, 0x9a, 0x39, 0x34, 0x0e, 0xef, 0x97, 0x05, 0xed,
	0xcb, 0x8c, 0x46, 0x32, 0x61, 0xb4, 0x12, 0xaa, 0x07, 0xed, 0x44, 0x5c, 0x65, 0xd3, 0x45, 0x12,
	0xe5, 0x48, 0xe5, 0xde, 0xc4, 0x3e, 0x23, 0x99, 0x2c, 0xb1, 0x53, 0x2f, 0x62, 0x66, 0x5f, 0x05,
	0xdb, 0xa8, 0x84, 0x7d, 0x06, 0x1d, 0xc4, 0xe7, 0x19, 0xc1, 0x54, 0x0a, 0xa7, 0xa9, 0x2d, 0x5b,
	0xc1, 0x76, 0xe0, 0x01, 0xc7, 0x32, 0xe3, 0x54, 0x38, 0x2d, 0x1d, 0x2b, 0xb6, 0xde, 0x4f, 0x0b,
	0xe0, 0x3a, 0xe2, 0x49, 0x2a, 0xc7, 0x58, 0x22, 0xfb, 0x05, 0x9c, 0x88, 0x64, 0x4e, 0x31, 0x17,
	0xb7, 0x11, 0xcb, 0xa8, 0xd4, 0x45, 0x9c, 0x84, 0xc7, 0xb9, 0xf8, 0x41, 0x69, 0x55, 0x50, 0x47,
	0x95, 0x50, 0xef, 0x76, 0xa1, 0x54, 0x93, 0x4f, 0x83, 0x27, 0xfb, 0x5d, 0x9c, 0x8c, 0x6f, 0x56,
	0x29, 0xbe, 0x41, 0xf3, 0x1d, 0x5a, 0xef, 0x87, 0x05, 0x30, 0x66, 0x71, 0xb6, 0xc0, 0x9a, 0xa9,
	0xaa, 0x9f, 0xe7, 0xd0, 0xd4, 0x6f, 0x4c, 0xff, 0xb8, 0x1b, 0x3c, 0xda, 0x3f, 0xd5, 0xbc, 0x8e,
	0xd0, 0x58, 0xec, 0xb7, 0xd0, 0x99, 0xe5, 0x77, 0x63, 0x28, 0xba, 0xc1, 0xe3, 0x83, 0xbb, 0xcc,
	0xc3, 0xe1, 0xd6, 0xe8, 0x7d, 0x87, 0xf6, 0x38, 0x7f, 0xf7, 0x76, 0x00, 0x2d, 0xa1, 0x7b, 0xa4,
	0x19, 0xba, 0x81, 0x73, 0xf0, 0xbb, 0xb2, 0x7f, 0x9f, 0x6a, 0x61, 0xee, 0x54, 0x39, 0x44, 0xd7,
	0xa0, 0xef, 0xfb, 0xbf, 0x9c, 0x6d, 0x7d, 0x2a, 0xc7, 0x38, 0x47, 0x2d, 0x68, 0xa8, 0x59, 0x0b,
	0x26, 0x70, 0x76, 0x31, 0x19, 0x17, 0x53, 0x53, 0x62, 0xbc, 0x87, 0xee, 0x47, 0x2c, 0xcb, 0xed,
	0x41, 0x11, 0x85, 0xbd, 0x77, 0xa0, 0x17, 0x7e, 0xaf, 0x36, 0xba, 0xf8, 0xbd, 0x76, 0xad, 0xfb,
	0xb5, 0x6b, 0xfd, 0x5d, 0xbb, 0xd6, 0xdd, 0xc6, 0xad, 0xdd, 0x6f, 0xdc, 0xda, 0x9f, 0x8d, 0x5b,
	0xfb, 0x72, 0x3e, 0x4f, 0xe4, 0xd7, 0x6c, 0x3a, 0x8c, 0x18, 0xf1, 0xb7, 0x03, 0x2d, 0x24, 0x52,
	0xcd, 0xf0, 0xd3, 0x6f, 0x73, 0x5f, 0xf7, 0x52, 0xcd, 0xf8, 0xb4, 0xa5, 0xe7, 0xfa, 0xcd, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xd1, 0x0a, 0x76, 0x25, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DVMBytecodeMetadataClient is the client API for DVMBytecodeMetadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DVMBytecodeMetadataClient interface {
	GetMetadata(ctx context.Context, in *Bytecode, opts ...grpc.CallOption) (*Metadata, error)
}

type dVMBytecodeMetadataClient struct {
	cc grpc1.ClientConn
}

func NewDVMBytecodeMetadataClient(cc grpc1.ClientConn) DVMBytecodeMetadataClient {
	return &dVMBytecodeMetadataClient{cc}
}

func (c *dVMBytecodeMetadataClient) GetMetadata(ctx context.Context, in *Bytecode, opts ...grpc.CallOption) (*Metadata, error) {
	out := new(Metadata)
	err := c.cc.Invoke(ctx, "/dfinance.dvm.DVMBytecodeMetadata/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DVMBytecodeMetadataServer is the server API for DVMBytecodeMetadata service.
type DVMBytecodeMetadataServer interface {
	GetMetadata(context.Context, *Bytecode) (*Metadata, error)
}

// UnimplementedDVMBytecodeMetadataServer can be embedded to have forward compatible implementations.
type UnimplementedDVMBytecodeMetadataServer struct {
}

func (*UnimplementedDVMBytecodeMetadataServer) GetMetadata(ctx context.Context, req *Bytecode) (*Metadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}

func RegisterDVMBytecodeMetadataServer(s grpc1.Server, srv DVMBytecodeMetadataServer) {
	s.RegisterService(&_DVMBytecodeMetadata_serviceDesc, srv)
}

func _DVMBytecodeMetadata_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bytecode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DVMBytecodeMetadataServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.dvm.DVMBytecodeMetadata/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DVMBytecodeMetadataServer).GetMetadata(ctx, req.(*Bytecode))
	}
	return interceptor(ctx, in, info, handler)
}

var _DVMBytecodeMetadata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfinance.dvm.DVMBytecodeMetadata",
	HandlerType: (*DVMBytecodeMetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadata",
			Handler:    _DVMBytecodeMetadata_GetMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfinance/dvm/metadata.proto",
}

func (m *Bytecode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bytecode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bytecode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Field) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Struct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Struct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Struct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Field) > 0 {
		for iNdEx := len(m.Field) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Field[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TypeParameters) > 0 {
		for iNdEx := len(m.TypeParameters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeParameters[iNdEx])
			copy(dAtA[i:], m.TypeParameters[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.TypeParameters[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsResource {
		i--
		if m.IsResource {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Function) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Function) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Function) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Returns) > 0 {
		for iNdEx := len(m.Returns) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Returns[iNdEx])
			copy(dAtA[i:], m.Returns[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.Returns[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Arguments[iNdEx])
			copy(dAtA[i:], m.Arguments[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.Arguments[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TypeParameters) > 0 {
		for iNdEx := len(m.TypeParameters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeParameters[iNdEx])
			copy(dAtA[i:], m.TypeParameters[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.TypeParameters[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.IsNative {
		i--
		if m.IsNative {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsPublic {
		i--
		if m.IsPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScriptMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScriptMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScriptMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Arguments) > 0 {
		dAtA2 := make([]byte, len(m.Arguments)*10)
		var j1 int
		for _, num := range m.Arguments {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMetadata(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TypeParameters) > 0 {
		for iNdEx := len(m.TypeParameters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeParameters[iNdEx])
			copy(dAtA[i:], m.TypeParameters[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.TypeParameters[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SignersCount != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.SignersCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Functions) > 0 {
		for iNdEx := len(m.Functions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Functions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Types[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		{
			size := m.Meta.Size()
			i -= size
			if _, err := m.Meta.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Metadata_Script) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata_Script) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Script != nil {
		{
			size, err := m.Script.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Metadata_Module) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata_Module) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Module != nil {
		{
			size, err := m.Module.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bytecode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *Field) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *Struct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.IsResource {
		n += 2
	}
	if len(m.TypeParameters) > 0 {
		for _, s := range m.TypeParameters {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if len(m.Field) > 0 {
		for _, e := range m.Field {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *Function) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.IsPublic {
		n += 2
	}
	if m.IsNative {
		n += 2
	}
	if len(m.TypeParameters) > 0 {
		for _, s := range m.TypeParameters {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if len(m.Arguments) > 0 {
		for _, s := range m.Arguments {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if len(m.Returns) > 0 {
		for _, s := range m.Returns {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *ScriptMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignersCount != 0 {
		n += 1 + sovMetadata(uint64(m.SignersCount))
	}
	if len(m.TypeParameters) > 0 {
		for _, s := range m.TypeParameters {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if len(m.Arguments) > 0 {
		l = 0
		for _, e := range m.Arguments {
			l += sovMetadata(uint64(e))
		}
		n += 1 + sovMetadata(uint64(l)) + l
	}
	return n
}

func (m *ModuleMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if len(m.Functions) > 0 {
		for _, e := range m.Functions {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		n += m.Meta.Size()
	}
	return n
}

func (m *Metadata_Script) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Script != nil {
		l = m.Script.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}
func (m *Metadata_Module) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Module != nil {
		l = m.Module.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bytecode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bytecode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bytecode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Struct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Struct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Struct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsResource", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsResource = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeParameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeParameters = append(m.TypeParameters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = append(m.Field, &Field{})
			if err := m.Field[len(m.Field)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Function) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Function: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Function: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNative", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNative = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeParameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeParameters = append(m.TypeParameters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Returns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Returns = append(m.Returns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScriptMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScriptMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScriptMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignersCount", wireType)
			}
			m.SignersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignersCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeParameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeParameters = append(m.TypeParameters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v VMTypeTag
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= VMTypeTag(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Arguments = append(m.Arguments, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMetadata
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMetadata
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Arguments) == 0 {
					m.Arguments = make([]VMTypeTag, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v VMTypeTag
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= VMTypeTag(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Arguments = append(m.Arguments, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, &Struct{})
			if err := m.Types[len(m.Types)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Functions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Functions = append(m.Functions, &Function{})
			if err := m.Functions[len(m.Functions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScriptMeta{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Meta = &Metadata_Script{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleMeta{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Meta = &Metadata_Module{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
