// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dfinance/dvm/compiler.proto

package dvm

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Compilation unit.
type CompilationUnit struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CompilationUnit) Reset()         { *m = CompilationUnit{} }
func (m *CompilationUnit) String() string { return proto.CompactTextString(m) }
func (*CompilationUnit) ProtoMessage()    {}
func (*CompilationUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a4d9f4d9267a592, []int{0}
}
func (m *CompilationUnit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompilationUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompilationUnit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompilationUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompilationUnit.Merge(m, src)
}
func (m *CompilationUnit) XXX_Size() int {
	return m.Size()
}
func (m *CompilationUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_CompilationUnit.DiscardUnknown(m)
}

var xxx_messageInfo_CompilationUnit proto.InternalMessageInfo

func (m *CompilationUnit) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CompilationUnit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Compiler API
type SourceFiles struct {
	Units   []*CompilationUnit `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`
	Address []byte             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *SourceFiles) Reset()         { *m = SourceFiles{} }
func (m *SourceFiles) String() string { return proto.CompactTextString(m) }
func (*SourceFiles) ProtoMessage()    {}
func (*SourceFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a4d9f4d9267a592, []int{1}
}
func (m *SourceFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SourceFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SourceFiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SourceFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceFiles.Merge(m, src)
}
func (m *SourceFiles) XXX_Size() int {
	return m.Size()
}
func (m *SourceFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceFiles.DiscardUnknown(m)
}

var xxx_messageInfo_SourceFiles proto.InternalMessageInfo

func (m *SourceFiles) GetUnits() []*CompilationUnit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *SourceFiles) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// Compiled source.
type CompiledUnit struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Bytecode []byte `protobuf:"bytes,2,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
}

func (m *CompiledUnit) Reset()         { *m = CompiledUnit{} }
func (m *CompiledUnit) String() string { return proto.CompactTextString(m) }
func (*CompiledUnit) ProtoMessage()    {}
func (*CompiledUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a4d9f4d9267a592, []int{2}
}
func (m *CompiledUnit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompiledUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompiledUnit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompiledUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompiledUnit.Merge(m, src)
}
func (m *CompiledUnit) XXX_Size() int {
	return m.Size()
}
func (m *CompiledUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_CompiledUnit.DiscardUnknown(m)
}

var xxx_messageInfo_CompiledUnit proto.InternalMessageInfo

func (m *CompiledUnit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CompiledUnit) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

type CompilationResult struct {
	Units  []*CompiledUnit `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`
	Errors []string        `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *CompilationResult) Reset()         { *m = CompilationResult{} }
func (m *CompilationResult) String() string { return proto.CompactTextString(m) }
func (*CompilationResult) ProtoMessage()    {}
func (*CompilationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a4d9f4d9267a592, []int{3}
}
func (m *CompilationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompilationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompilationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompilationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompilationResult.Merge(m, src)
}
func (m *CompilationResult) XXX_Size() int {
	return m.Size()
}
func (m *CompilationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CompilationResult.DiscardUnknown(m)
}

var xxx_messageInfo_CompilationResult proto.InternalMessageInfo

func (m *CompilationResult) GetUnits() []*CompiledUnit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *CompilationResult) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*CompilationUnit)(nil), "dfinance.dvm.CompilationUnit")
	proto.RegisterType((*SourceFiles)(nil), "dfinance.dvm.SourceFiles")
	proto.RegisterType((*CompiledUnit)(nil), "dfinance.dvm.CompiledUnit")
	proto.RegisterType((*CompilationResult)(nil), "dfinance.dvm.CompilationResult")
}

func init() { proto.RegisterFile("dfinance/dvm/compiler.proto", fileDescriptor_8a4d9f4d9267a592) }

var fileDescriptor_8a4d9f4d9267a592 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0x0a, 0x2d, 0xbd, 0x56, 0x42, 0x78, 0x40, 0xa1, 0x88, 0x50, 0x65, 0xaa, 0x18,
	0x12, 0xd4, 0x4e, 0x2c, 0x0c, 0x50, 0xc1, 0x1e, 0x04, 0x03, 0x82, 0x21, 0x8d, 0x8f, 0x62, 0xd1,
	0xc4, 0x91, 0xed, 0x54, 0xf4, 0x2d, 0x78, 0x2c, 0xc6, 0x8e, 0x8c, 0xa8, 0x7d, 0x11, 0x14, 0x27,
	0xa1, 0x2d, 0x82, 0xed, 0xce, 0xe7, 0xff, 0xfe, 0x4f, 0xf7, 0xc3, 0x11, 0x7b, 0xe6, 0x49, 0x98,
	0x44, 0xe8, 0xb3, 0x69, 0xec, 0x47, 0x22, 0x4e, 0xf9, 0x04, 0xa5, 0x97, 0x4a, 0xa1, 0x05, 0x6d,
	0x57, 0x43, 0x8f, 0x4d, 0x63, 0xf7, 0x1c, 0xf6, 0xae, 0xcc, 0x3c, 0xd4, 0x5c, 0x24, 0x77, 0x09,
	0xd7, 0x94, 0xc2, 0xb6, 0xc6, 0x37, 0x6d, 0x93, 0x2e, 0xe9, 0x35, 0x03, 0x53, 0xe7, 0x6f, 0x49,
	0x18, 0xa3, 0xbd, 0x55, 0xbc, 0xe5, 0xb5, 0xfb, 0x08, 0xad, 0x5b, 0x91, 0xc9, 0x08, 0xaf, 0xf9,
	0x04, 0x15, 0x1d, 0xc0, 0x4e, 0x96, 0x70, 0xad, 0x6c, 0xd2, 0xad, 0xf5, 0x5a, 0xfd, 0x63, 0x6f,
	0xdd, 0xc7, 0xfb, 0x65, 0x12, 0x14, 0x7f, 0xa9, 0x0d, 0x8d, 0x90, 0x31, 0x89, 0x4a, 0x99, 0xd5,
	0xed, 0xa0, 0x6a, 0xdd, 0x0b, 0x68, 0x17, 0x1a, 0x64, 0x15, 0x95, 0x21, 0x20, 0x2b, 0x02, 0xda,
	0x81, 0xdd, 0xd1, 0x4c, 0x63, 0x24, 0x18, 0x96, 0xf2, 0x9f, 0xde, 0x7d, 0x82, 0xfd, 0x35, 0xcf,
	0x00, 0x55, 0x36, 0xd1, 0xf4, 0x6c, 0x93, 0xb1, 0xf3, 0x17, 0x63, 0xe1, 0x57, 0x01, 0x1e, 0x40,
	0x1d, 0xa5, 0x14, 0x32, 0xe7, 0xab, 0xf5, 0x9a, 0x41, 0xd9, 0xf5, 0xef, 0xa1, 0x35, 0x9c, 0xc6,
	0xa5, 0x42, 0xd2, 0x1b, 0x68, 0x94, 0x35, 0x3d, 0xdc, 0x5c, 0xba, 0x76, 0xa2, 0xce, 0xc9, 0xbf,
	0x37, 0x29, 0xf8, 0x5c, 0xeb, 0x72, 0xf8, 0xb1, 0x70, 0xc8, 0x7c, 0xe1, 0x90, 0xaf, 0x85, 0x43,
	0xde, 0x97, 0x8e, 0x35, 0x5f, 0x3a, 0xd6, 0xe7, 0xd2, 0xb1, 0x1e, 0x4e, 0xc7, 0x5c, 0xbf, 0x64,
	0x23, 0x2f, 0x12, 0xb1, 0xbf, 0xca, 0x57, 0x69, 0xa3, 0xf7, 0xd3, 0xd7, 0xb1, 0xaf, 0x67, 0x29,
	0xaa, 0x3c, 0xf2, 0x51, 0xdd, 0x44, 0x3d, 0xf8, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x63, 0xd7, 0x29,
	0x3c, 0x09, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DvmCompilerClient is the client API for DvmCompiler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DvmCompilerClient interface {
	Compile(ctx context.Context, in *SourceFiles, opts ...grpc.CallOption) (*CompilationResult, error)
}

type dvmCompilerClient struct {
	cc grpc1.ClientConn
}

func NewDvmCompilerClient(cc grpc1.ClientConn) DvmCompilerClient {
	return &dvmCompilerClient{cc}
}

func (c *dvmCompilerClient) Compile(ctx context.Context, in *SourceFiles, opts ...grpc.CallOption) (*CompilationResult, error) {
	out := new(CompilationResult)
	err := c.cc.Invoke(ctx, "/dfinance.dvm.DvmCompiler/Compile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DvmCompilerServer is the server API for DvmCompiler service.
type DvmCompilerServer interface {
	Compile(context.Context, *SourceFiles) (*CompilationResult, error)
}

// UnimplementedDvmCompilerServer can be embedded to have forward compatible implementations.
type UnimplementedDvmCompilerServer struct {
}

func (*UnimplementedDvmCompilerServer) Compile(ctx context.Context, req *SourceFiles) (*CompilationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}

func RegisterDvmCompilerServer(s grpc1.Server, srv DvmCompilerServer) {
	s.RegisterService(&_DvmCompiler_serviceDesc, srv)
}

func _DvmCompiler_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvmCompilerServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.dvm.DvmCompiler/Compile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvmCompilerServer).Compile(ctx, req.(*SourceFiles))
	}
	return interceptor(ctx, in, info, handler)
}

var _DvmCompiler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfinance.dvm.DvmCompiler",
	HandlerType: (*DvmCompilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _DvmCompiler_Compile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfinance/dvm/compiler.proto",
}

func (m *CompilationUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompilationUnit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompilationUnit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCompiler(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintCompiler(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SourceFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SourceFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SourceFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCompiler(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Units) > 0 {
		for iNdEx := len(m.Units) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Units[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompiler(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CompiledUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompiledUnit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompiledUnit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytecode) > 0 {
		i -= len(m.Bytecode)
		copy(dAtA[i:], m.Bytecode)
		i = encodeVarintCompiler(dAtA, i, uint64(len(m.Bytecode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCompiler(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompilationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompilationResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompilationResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintCompiler(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Units) > 0 {
		for iNdEx := len(m.Units) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Units[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompiler(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCompiler(dAtA []byte, offset int, v uint64) int {
	offset -= sovCompiler(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CompilationUnit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovCompiler(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompiler(uint64(l))
	}
	return n
}

func (m *SourceFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovCompiler(uint64(l))
		}
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCompiler(uint64(l))
	}
	return n
}

func (m *CompiledUnit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompiler(uint64(l))
	}
	l = len(m.Bytecode)
	if l > 0 {
		n += 1 + l + sovCompiler(uint64(l))
	}
	return n
}

func (m *CompilationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovCompiler(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovCompiler(uint64(l))
		}
	}
	return n
}

func sovCompiler(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCompiler(x uint64) (n int) {
	return sovCompiler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CompilationUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompiler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompilationUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompilationUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompiler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompiler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompiler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompiler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompiler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompiler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SourceFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompiler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SourceFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SourceFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompiler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompiler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, &CompilationUnit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCompiler
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCompiler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompiler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompiler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompiledUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompiler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompiledUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompiledUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompiler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompiler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytecode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCompiler
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCompiler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytecode = append(m.Bytecode[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytecode == nil {
				m.Bytecode = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompiler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompiler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompilationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompiler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompilationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompilationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompiler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompiler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, &CompiledUnit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompiler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompiler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompiler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompiler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompiler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompiler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompiler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompiler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCompiler
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCompiler
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCompiler
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCompiler        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompiler          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCompiler = fmt.Errorf("proto: unexpected end of group")
)
